// ============================================================
// SCRIPT AUTOMATIZADO: CORRECCI√ìN POL√çTICA INSERT USERS
// ============================================================
// Aplica la soluci√≥n definitiva para el error de registro
// ============================================================

const { createClient } = require('@supabase/supabase-js');
const fs = require('fs');

// Configuraci√≥n de Supabase con credenciales reales
const SUPABASE_URL = 'https://pqmjfwmbitodwtpedlle.supabase.co';
const SUPABASE_SERVICE_ROLE_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InBxbWpmd21iaXRvZHd0cGVkbGxlIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTczNTkzODY3MSwiZXhwIjoyMDUxNTE0NjcxfQ.oaVblFsOgm8SUNOTOCgmSJG_-6FL4_AQx_DjAhKQhSs';

// Cliente con permisos de service_role para modificar pol√≠ticas
const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY);

console.log('üîß EJECUTANDO CORRECCI√ìN AUTOM√ÅTICA: POL√çTICA INSERT USERS');
console.log('============================================================\n');

async function aplicarCorreccionPoliticas() {
    const reporte = {
        timestamp: new Date().toISOString(),
        proceso: 'Correcci√≥n Autom√°tica Pol√≠tica INSERT Users',
        pasos: [],
        errores: [],
        exito: false
    };

    try {
        console.log('üìã PASO 1: Verificar pol√≠ticas actuales...');
        
        // Consultar pol√≠ticas actuales
        const { data: politicasActuales, error: errorConsulta } = await supabase
            .rpc('exec_sql', {
                sql: `
                SELECT 
                    schemaname,
                    tablename,
                    policyname,
                    permissive,
                    roles,
                    cmd,
                    qual,
                    with_check
                FROM pg_policies 
                WHERE tablename = 'users' 
                AND schemaname = 'public'
                AND cmd = 'INSERT'
                ORDER BY policyname;
                `
            });

        if (errorConsulta) {
            console.log('‚ùå Error consultando pol√≠ticas:', errorConsulta.message);
            reporte.errores.push(`Error consultando pol√≠ticas: ${errorConsulta.message}`);
        } else {
            console.log('‚úÖ Pol√≠ticas INSERT actuales encontradas:', politicasActuales?.length || 0);
            reporte.pasos.push({
                paso: 1,
                descripcion: 'Verificaci√≥n pol√≠ticas actuales',
                resultado: 'exitoso',
                detalles: `${politicasActuales?.length || 0} pol√≠ticas INSERT encontradas`
            });
        }

        console.log('\nüóëÔ∏è PASO 2: Eliminar pol√≠tica problem√°tica...');
        
        // Eliminar pol√≠tica problem√°tica
        const { error: errorEliminar } = await supabase
            .rpc('exec_sql', {
                sql: `DROP POLICY IF EXISTS "Enable insert for registration" ON public.users;`
            });

        if (errorEliminar) {
            console.log('‚ùå Error eliminando pol√≠tica:', errorEliminar.message);
            reporte.errores.push(`Error eliminando pol√≠tica: ${errorEliminar.message}`);
        } else {
            console.log('‚úÖ Pol√≠tica problem√°tica eliminada exitosamente');
            reporte.pasos.push({
                paso: 2,
                descripcion: 'Eliminaci√≥n pol√≠tica problem√°tica',
                resultado: 'exitoso',
                detalles: 'Pol√≠tica "Enable insert for registration" eliminada'
            });
        }

        console.log('\nüÜï PASO 3: Crear nueva pol√≠tica INSERT funcional...');
        
        // Crear nueva pol√≠tica funcional
        const { error: errorCrear1 } = await supabase
            .rpc('exec_sql', {
                sql: `
                CREATE POLICY "users_insert_policy_fixed" ON public.users
                    FOR INSERT
                    WITH CHECK (
                        (auth.uid() IS NOT NULL) OR 
                        (auth.role() = 'anon') OR 
                        (auth.role() = 'service_role')
                    );
                `
            });

        if (errorCrear1) {
            console.log('‚ùå Error creando pol√≠tica principal:', errorCrear1.message);
            reporte.errores.push(`Error creando pol√≠tica principal: ${errorCrear1.message}`);
        } else {
            console.log('‚úÖ Nueva pol√≠tica principal creada exitosamente');
            reporte.pasos.push({
                paso: 3,
                descripcion: 'Creaci√≥n pol√≠tica principal',
                resultado: 'exitoso',
                detalles: 'Pol√≠tica "users_insert_policy_fixed" creada'
            });
        }

        console.log('\nüîÑ PASO 4: Crear pol√≠tica alternativa de respaldo...');
        
        // Crear pol√≠tica alternativa m√°s permisiva
        const { error: errorCrear2 } = await supabase
            .rpc('exec_sql', {
                sql: `
                CREATE POLICY "users_registration_insert" ON public.users
                    FOR INSERT
                    WITH CHECK (true);
                `
            });

        if (errorCrear2) {
            console.log('‚ùå Error creando pol√≠tica alternativa:', errorCrear2.message);
            reporte.errores.push(`Error creando pol√≠tica alternativa: ${errorCrear2.message}`);
        } else {
            console.log('‚úÖ Pol√≠tica alternativa creada exitosamente');
            reporte.pasos.push({
                paso: 4,
                descripcion: 'Creaci√≥n pol√≠tica alternativa',
                resultado: 'exitoso',
                detalles: 'Pol√≠tica "users_registration_insert" creada'
            });
        }

        console.log('\nüîê PASO 5: Verificar permisos de tabla...');
        
        // Otorgar permisos necesarios
        const { error: errorPermisos } = await supabase
            .rpc('exec_sql', {
                sql: `
                GRANT INSERT ON public.users TO anon;
                GRANT INSERT ON public.users TO authenticated;
                `
            });

        if (errorPermisos) {
            console.log('‚ùå Error otorgando permisos:', errorPermisos.message);
            reporte.errores.push(`Error otorgando permisos: ${errorPermisos.message}`);
        } else {
            console.log('‚úÖ Permisos otorgados exitosamente');
            reporte.pasos.push({
                paso: 5,
                descripcion: 'Otorgamiento de permisos',
                resultado: 'exitoso',
                detalles: 'Permisos INSERT otorgados a anon y authenticated'
            });
        }

        console.log('\n‚úÖ PASO 6: Verificar pol√≠ticas finales...');
        
        // Verificar pol√≠ticas finales
        const { data: politicasFinales, error: errorVerificacion } = await supabase
            .rpc('exec_sql', {
                sql: `
                SELECT 
                    policyname,
                    cmd,
                    with_check
                FROM pg_policies 
                WHERE tablename = 'users' 
                AND schemaname = 'public'
                AND cmd = 'INSERT'
                ORDER BY policyname;
                `
            });

        if (errorVerificacion) {
            console.log('‚ùå Error verificando pol√≠ticas finales:', errorVerificacion.message);
            reporte.errores.push(`Error verificando pol√≠ticas finales: ${errorVerificacion.message}`);
        } else {
            console.log('‚úÖ Verificaci√≥n completada');
            console.log('üìä Pol√≠ticas INSERT finales:');
            if (politicasFinales && politicasFinales.length > 0) {
                politicasFinales.forEach(politica => {
                    console.log(`   - ${politica.policyname}: ${politica.with_check}`);
                });
            }
            
            reporte.pasos.push({
                paso: 6,
                descripcion: 'Verificaci√≥n pol√≠ticas finales',
                resultado: 'exitoso',
                detalles: `${politicasFinales?.length || 0} pol√≠ticas INSERT activas`,
                politicas: politicasFinales
            });
        }

        // Determinar √©xito general
        reporte.exito = reporte.errores.length === 0;
        
        console.log('\nüéØ RESUMEN DE LA CORRECCI√ìN:');
        console.log('============================================================');
        console.log(`‚úÖ Pasos completados: ${reporte.pasos.length}`);
        console.log(`‚ùå Errores encontrados: ${reporte.errores.length}`);
        console.log(`üéØ Estado final: ${reporte.exito ? 'EXITOSO' : 'CON ERRORES'}`);
        
        if (reporte.exito) {
            console.log('\nüéâ CORRECCI√ìN COMPLETADA EXITOSAMENTE');
            console.log('La pol√≠tica INSERT problem√°tica ha sido corregida.');
            console.log('El registro de usuarios deber√≠a funcionar ahora.');
        } else {
            console.log('\n‚ö†Ô∏è CORRECCI√ìN COMPLETADA CON ERRORES');
            console.log('Revisar errores y aplicar correcciones manuales si es necesario.');
        }

    } catch (error) {
        console.log('‚ùå Error cr√≠tico en la correcci√≥n:', error.message);
        reporte.errores.push(`Error cr√≠tico: ${error.message}`);
        reporte.exito = false;
    }

    // Guardar reporte
    try {
        fs.writeFileSync(
            'Blackbox/227-Reporte-Correccion-Policy-INSERT-Users-Final.json',
            JSON.stringify(reporte, null, 2)
        );
        console.log('\nüìÑ Reporte guardado en: Blackbox/227-Reporte-Correccion-Policy-INSERT-Users-Final.json');
    } catch (errorArchivo) {
        console.log('‚ùå Error guardando reporte:', errorArchivo.message);
    }

    console.log('\nüîÑ PR√ìXIMOS PASOS:');
    console.log('1. Ejecutar testing de registro de usuarios');
    console.log('2. Verificar que el error "Database error saving new user" est√© resuelto');
    console.log('3. Probar registro desde la aplicaci√≥n web');
    console.log('4. Confirmar funcionamiento completo');

    return reporte;
}

// Ejecutar correcci√≥n
aplicarCorreccionPoliticas()
    .then(reporte => {
        console.log('\n‚úÖ PROCESO DE CORRECCI√ìN COMPLETADO');
        process.exit(reporte.exito ? 0 : 1);
    })
    .catch(error => {
        console.log('‚ùå Error fatal:', error.message);
        process.exit(1);
    });
