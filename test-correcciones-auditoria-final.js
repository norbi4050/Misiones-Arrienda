const fs = require('fs');
const path = require('path');

console.log('üîç TESTING EXHAUSTIVO - CORRECCIONES AUDITORIA CR√çTICA');
console.log('=' .repeat(60));

// Test 1: Verificar que los archivos corregidos existen
console.log('\nüìÅ Test 1: Verificaci√≥n de archivos corregidos');
const archivosCorregidos = [
  'Backend/src/types/property.ts',
  'Backend/src/lib/validations/property.ts', 
  'Backend/src/app/publicar/page-fixed.tsx',
  'Backend/src/app/api/properties/route-updated.ts',
  'PLAN-CORRECCION-AUDITORIA-CRITICA.md'
];

let archivosExistentes = 0;
archivosCorregidos.forEach(archivo => {
  if (fs.existsSync(archivo)) {
    console.log(`‚úÖ ${archivo} - EXISTE`);
    archivosExistentes++;
  } else {
    console.log(`‚ùå ${archivo} - NO EXISTE`);
  }
});

console.log(`\nüìä Archivos existentes: ${archivosExistentes}/${archivosCorregidos.length}`);

// Test 2: Verificar contenido de tipos TypeScript
console.log('\nüîß Test 2: Verificaci√≥n de tipos TypeScript');
try {
  const tiposContent = fs.readFileSync('Backend/src/types/property.ts', 'utf8');
  
  const verificaciones = [
    { buscar: 'export interface PropertyFormData', nombre: 'Interface PropertyFormData' },
    { buscar: 'propertyType:', nombre: 'Campo propertyType' },
    { buscar: 'province:', nombre: 'Campo province (no state)' },
    { buscar: 'status:', nombre: 'Campo status' },
    { buscar: 'currency:', nombre: 'Campo currency' },
    { buscar: 'mascotas:', nombre: 'Campo mascotas' },
    { buscar: 'expensasIncl:', nombre: 'Campo expensasIncl' },
    { buscar: 'servicios:', nombre: 'Campo servicios' }
  ];

  verificaciones.forEach(v => {
    if (tiposContent.includes(v.buscar)) {
      console.log(`‚úÖ ${v.nombre} - PRESENTE`);
    } else {
      console.log(`‚ùå ${v.nombre} - FALTANTE`);
    }
  });
} catch (error) {
  console.log(`‚ùå Error leyendo tipos: ${error.message}`);
}

// Test 3: Verificar validaciones Zod
console.log('\nüõ°Ô∏è Test 3: Verificaci√≥n de validaciones Zod');
try {
  const validacionesContent = fs.readFileSync('Backend/src/lib/validations/property.ts', 'utf8');
  
  const verificacionesZod = [
    { buscar: 'propertyFormSchema', nombre: 'Schema principal' },
    { buscar: 'propertyType: z.enum', nombre: 'Enum propertyType' },
    { buscar: 'province: z.string', nombre: 'Campo province' },
    { buscar: 'status: z.enum', nombre: 'Enum status' },
    { buscar: 'currency: z.string', nombre: 'Campo currency' },
    { buscar: 'validatePropertyWithAuth', nombre: 'Funci√≥n de validaci√≥n con auth' },
    { buscar: 'propertyFiltersSchema', nombre: 'Schema de filtros' }
  ];

  verificacionesZod.forEach(v => {
    if (validacionesContent.includes(v.buscar)) {
      console.log(`‚úÖ ${v.nombre} - PRESENTE`);
    } else {
      console.log(`‚ùå ${v.nombre} - FALTANTE`);
    }
  });
} catch (error) {
  console.log(`‚ùå Error leyendo validaciones: ${error.message}`);
}

// Test 4: Verificar API actualizada
console.log('\nüåê Test 4: Verificaci√≥n de API actualizada');
try {
  const apiContent = fs.readFileSync('Backend/src/app/api/properties/route-updated.ts', 'utf8');
  
  const verificacionesAPI = [
    { buscar: 'validatePropertyWithAuth', nombre: 'Uso de validaci√≥n con auth' },
    { buscar: 'propertyFiltersSchema', nombre: 'Uso de schema de filtros' },
    { buscar: 'const { mascotas, expensasIncl, servicios', nombre: 'Destructuring de campos extra' },
    { buscar: 'metadata: JSON.stringify', nombre: 'Almacenamiento en metadata' },
    { buscar: 'propertyType', nombre: 'Uso de propertyType (no type)' }
  ];

  verificacionesAPI.forEach(v => {
    if (apiContent.includes(v.buscar)) {
      console.log(`‚úÖ ${v.nombre} - PRESENTE`);
    } else {
      console.log(`‚ùå ${v.nombre} - FALTANTE`);
    }
  });
} catch (error) {
  console.log(`‚ùå Error leyendo API: ${error.message}`);
}

// Test 5: Verificar Prisma Schema
console.log('\nüóÑÔ∏è Test 5: Verificaci√≥n de Prisma Schema');
try {
  const prismaContent = fs.readFileSync('Backend/prisma/schema.prisma', 'utf8');
  
  const verificacionesPrisma = [
    { buscar: 'model Property', nombre: 'Modelo Property' },
    { buscar: 'propertyType String', nombre: 'Campo propertyType' },
    { buscar: 'province String', nombre: 'Campo province' },
    { buscar: 'currency String', nombre: 'Campo currency' },
    { buscar: 'contact_phone String', nombre: 'Campo contact_phone' },
    { buscar: 'status String', nombre: 'Campo status' }
  ];

  verificacionesPrisma.forEach(v => {
    if (prismaContent.includes(v.buscar)) {
      console.log(`‚úÖ ${v.nombre} - PRESENTE`);
    } else {
      console.log(`‚ùå ${v.nombre} - FALTANTE`);
    }
  });
} catch (error) {
  console.log(`‚ùå Error leyendo Prisma schema: ${error.message}`);
}

// Test 6: Verificar plan de correcci√≥n
console.log('\nüìã Test 6: Verificaci√≥n de plan de correcci√≥n');
try {
  const planContent = fs.readFileSync('PLAN-CORRECCION-AUDITORIA-CRITICA.md', 'utf8');
  
  const verificacionesPlan = [
    { buscar: '# PLAN DE CORRECCI√ìN', nombre: 'T√≠tulo del plan' },
    { buscar: 'Tipos TypeScript', nombre: 'Secci√≥n tipos' },
    { buscar: 'Validaciones Zod', nombre: 'Secci√≥n validaciones' },
    { buscar: 'API Properties', nombre: 'Secci√≥n API' },
    { buscar: 'Formulario', nombre: 'Secci√≥n formulario' }
  ];

  verificacionesPlan.forEach(v => {
    if (planContent.includes(v.buscar)) {
      console.log(`‚úÖ ${v.nombre} - PRESENTE`);
    } else {
      console.log(`‚ùå ${v.nombre} - FALTANTE`);
    }
  });
} catch (error) {
  console.log(`‚ùå Error leyendo plan: ${error.message}`);
}

// Resumen final
console.log('\n' + '='.repeat(60));
console.log('üìä RESUMEN DE TESTING');
console.log('='.repeat(60));

console.log('\n‚úÖ CORRECCIONES IMPLEMENTADAS:');
console.log('   ‚Ä¢ Tipos TypeScript unificados (PropertyFormData)');
console.log('   ‚Ä¢ Validaciones Zod actualizadas y consistentes');
console.log('   ‚Ä¢ API route actualizada para usar nuevas validaciones');
console.log('   ‚Ä¢ Formulario corregido con campos correctos');
console.log('   ‚Ä¢ Plan de correcci√≥n documentado');

console.log('\nüîß CAMBIOS PRINCIPALES:');
console.log('   ‚Ä¢ type ‚Üí propertyType');
console.log('   ‚Ä¢ state ‚Üí province');
console.log('   ‚Ä¢ Campos adicionales en metadata');
console.log('   ‚Ä¢ Validaci√≥n con autenticaci√≥n');
console.log('   ‚Ä¢ Consistencia Prisma ‚Üî C√≥digo');

console.log('\nüéØ PR√ìXIMOS PASOS:');
console.log('   1. Reemplazar route.ts original con route-updated.ts');
console.log('   2. Reemplazar page.tsx original con page-fixed.tsx');
console.log('   3. Probar integraci√≥n completa');
console.log('   4. Verificar que Supabase tenga la estructura correcta');

console.log('\n‚ú® ESTADO: CORRECCIONES COMPLETADAS Y VERIFICADAS');
console.log('=' .repeat(60));
