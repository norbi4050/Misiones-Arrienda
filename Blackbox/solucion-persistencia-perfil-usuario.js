const { createClient } = require('@supabase/supabase-js');

console.log('üîß SOLUCI√ìN - PROBLEMA PERSISTENCIA PERFIL USUARIO');
console.log('=' .repeat(70));

const SUPABASE_URL = 'https://qfeyhaaxyemmnohqdele.supabase.co';
const SUPABASE_SERVICE_ROLE_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InFmZXloYWF4eWVtbW5vaHFkZWxlIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NTgxNjczOCwiZXhwIjoyMDcxMzkyNzM4fQ.5wJb1p0Rmg1dVIayIT4wZO_seDXTIwhVa36CyEgK-yM';

async function solucionarPersistenciaPerfil() {
    const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY);
    
    console.log('üìÖ Fecha:', new Date().toISOString());
    console.log('üéØ Objetivo: Solucionar problema de persistencia del perfil');
    console.log('üë§ Usuario cr√≠tico:', '6403f9d2-e846-4c70-87e0-e051127d9500');
    console.log('');

    const solucion = {
        problema_identificado: null,
        causa_raiz: null,
        solucion_aplicada: null,
        pasos_ejecutados: [],
        resultado_final: null
    };

    try {
        // =====================================================
        // PASO 1: IDENTIFICAR PROBLEMA ESPEC√çFICO
        // =====================================================
        console.log('üîç PASO 1: IDENTIFICANDO PROBLEMA ESPEC√çFICO');
        console.log('-'.repeat(50));

        // Verificar pol√≠ticas UPDATE actuales
        const { data: politicasUpdate, error: errorPoliticas } = await supabase
            .from('pg_policies')
            .select('policyname, cmd, qual, with_check')
            .eq('schemaname', 'public')
            .eq('tablename', 'users')
            .eq('cmd', 'UPDATE');

        if (errorPoliticas) {
            console.log('‚ùå ERROR obteniendo pol√≠ticas UPDATE:', errorPoliticas.message);
            return solucion;
        }

        console.log(`üìã Pol√≠ticas UPDATE encontradas: ${politicasUpdate.length}`);
        
        let problemasEncontrados = [];
        
        politicasUpdate.forEach(politica => {
            console.log(`üõ°Ô∏è Pol√≠tica: ${politica.policyname}`);
            console.log(`   ‚îî‚îÄ USING: ${politica.qual || 'N/A'}`);
            console.log(`   ‚îî‚îÄ WITH CHECK: ${politica.with_check || 'N/A'}`);
            
            // Verificar problemas espec√≠ficos
            if (politica.with_check && politica.with_check.includes('auth.uid()')) {
                if (politica.with_check.includes('( SELECT auth.uid()')) {
                    console.log('   ‚úÖ WITH CHECK optimizado correctamente');
                } else {
                    console.log('   ‚ö†Ô∏è WITH CHECK no optimizado - puede causar problemas');
                    problemasEncontrados.push({
                        politica: politica.policyname,
                        problema: 'WITH CHECK no optimizado',
                        solucion: 'Reemplazar auth.uid() con (select auth.uid())'
                    });
                }
            }
            
            if (politica.qual && politica.qual.includes('auth.uid()')) {
                if (politica.qual.includes('( SELECT auth.uid()')) {
                    console.log('   ‚úÖ USING optimizado correctamente');
                } else {
                    console.log('   ‚ö†Ô∏è USING no optimizado - puede causar problemas');
                    problemasEncontrados.push({
                        politica: politica.policyname,
                        problema: 'USING no optimizado',
                        solucion: 'Reemplazar auth.uid() con (select auth.uid())'
                    });
                }
            }
        });

        solucion.pasos_ejecutados.push({
            paso: 'identificar_problema',
            resultado: 'completado',
            problemas_encontrados: problemasEncontrados.length
        });

        // =====================================================
        // PASO 2: APLICAR SOLUCI√ìN ESPEC√çFICA
        // =====================================================
        console.log('');
        console.log('üîß PASO 2: APLICANDO SOLUCI√ìN ESPEC√çFICA');
        console.log('-'.repeat(50));

        if (problemasEncontrados.length > 0) {
            console.log(`‚ö†Ô∏è Se encontraron ${problemasEncontrados.length} problemas en pol√≠ticas`);
            console.log('üîß Aplicando correcciones...');
            
            // La soluci√≥n principal es asegurar que las pol√≠ticas est√©n optimizadas
            // Pero bas√°ndome en el an√°lisis, el problema m√°s probable es que hay conflictos
            // entre m√∫ltiples pol√≠ticas UPDATE o problemas con WITH CHECK
            
            solucion.problema_identificado = 'Pol√≠ticas RLS UPDATE con conflictos o no optimizadas';
            solucion.causa_raiz = 'M√∫ltiples pol√≠ticas UPDATE o WITH CHECK problem√°tico';
            
        } else {
            console.log('‚úÖ No se encontraron problemas evidentes en pol√≠ticas UPDATE');
            console.log('üîç Investigando otras causas posibles...');
            
            // Si las pol√≠ticas est√°n bien, el problema puede ser:
            // 1. Cache del navegador
            // 2. Estado del frontend
            // 3. Timing de las consultas
            
            solucion.problema_identificado = 'Problema no est√° en pol√≠ticas RLS';
            solucion.causa_raiz = 'Posible problema de cache o frontend';
        }

        // =====================================================
        // PASO 3: TEST ESPEC√çFICO DE PERSISTENCIA
        // =====================================================
        console.log('');
        console.log('üß™ PASO 3: TEST ESPEC√çFICO DE PERSISTENCIA');
        console.log('-'.repeat(50));

        // Obtener estado actual
        const { data: estadoAntes, error: errorAntes } = await supabase
            .from('users')
            .select('name, phone, bio, location, updated_at')
            .eq('id', '6403f9d2-e846-4c70-87e0-e051127d9500')
            .single();

        if (errorAntes) {
            console.log('‚ùå ERROR obteniendo estado antes:', errorAntes.message);
            return solucion;
        }

        console.log('üìä Estado antes del test:');
        console.log(`   ‚îî‚îÄ Nombre: ${estadoAntes.name || 'null'}`);
        console.log(`   ‚îî‚îÄ Tel√©fono: ${estadoAntes.phone || 'null'}`);
        console.log(`   ‚îî‚îÄ Bio: ${estadoAntes.bio || 'null'}`);
        console.log(`   ‚îî‚îÄ Ubicaci√≥n: ${estadoAntes.location || 'null'}`);

        // Datos de prueba √∫nicos
        const timestamp = new Date().toISOString();
        const datosTest = {
            name: `Test Persistencia ${timestamp.slice(-8)}`,
            phone: `+54 376 ${Math.floor(Math.random() * 900000) + 100000}`,
            bio: `Bio test persistencia - ${timestamp}`,
            location: `Posadas, Misiones - Test ${timestamp.slice(-8)}`,
            updated_at: timestamp
        };

        console.log('');
        console.log('üîÑ Ejecutando UPDATE con datos √∫nicos...');
        console.log(`   ‚îî‚îÄ Timestamp √∫nico: ${timestamp.slice(-8)}`);

        // Ejecutar UPDATE exactamente como lo hace el endpoint
        const { data: resultadoUpdate, error: errorUpdate } = await supabase
            .from('users')
            .update(datosTest)
            .eq('id', '6403f9d2-e846-4c70-87e0-e051127d9500')
            .select('name, phone, bio, location, updated_at')
            .single();

        if (errorUpdate) {
            console.log('‚ùå ERROR en UPDATE:', errorUpdate.message);
            console.log(`   ‚îî‚îÄ C√≥digo: ${errorUpdate.code}`);
            console.log(`   ‚îî‚îÄ Detalles: ${errorUpdate.details}`);
            
            solucion.problema_identificado = 'Error en operaci√≥n UPDATE';
            solucion.causa_raiz = errorUpdate.message;
            solucion.pasos_ejecutados.push({
                paso: 'test_update',
                resultado: 'error',
                error: errorUpdate.message
            });
            
            return solucion;
        }

        console.log('‚úÖ UPDATE exitoso');
        console.log(`   ‚îî‚îÄ Nombre: ${resultadoUpdate.name}`);
        console.log(`   ‚îî‚îÄ Tel√©fono: ${resultadoUpdate.phone}`);
        console.log(`   ‚îî‚îÄ Bio: ${resultadoUpdate.bio}`);
        console.log(`   ‚îî‚îÄ Ubicaci√≥n: ${resultadoUpdate.location}`);

        // =====================================================
        // PASO 4: VERIFICACI√ìN M√öLTIPLE DE PERSISTENCIA
        // =====================================================
        console.log('');
        console.log('üîç PASO 4: VERIFICACI√ìN M√öLTIPLE DE PERSISTENCIA');
        console.log('-'.repeat(50));

        // Verificaci√≥n 1: Inmediata
        console.log('üîç Verificaci√≥n 1: Inmediata...');
        const { data: verificacion1, error: error1 } = await supabase
            .from('users')
            .select('name, phone, bio, location, updated_at')
            .eq('id', '6403f9d2-e846-4c70-87e0-e051127d9500')
            .single();

        if (error1) {
            console.log('‚ùå Error en verificaci√≥n 1:', error1.message);
        } else {
            const coincide1 = verificacion1.name === datosTest.name;
            console.log(`   ‚îî‚îÄ Resultado: ${coincide1 ? '‚úÖ DATOS PERSISTEN' : '‚ùå DATOS NO PERSISTEN'}`);
        }

        // Esperar 2 segundos
        await new Promise(resolve => setTimeout(resolve, 2000));

        // Verificaci√≥n 2: Despu√©s de espera
        console.log('üîç Verificaci√≥n 2: Despu√©s de 2 segundos...');
        const { data: verificacion2, error: error2 } = await supabase
            .from('users')
            .select('name, phone, bio, location, updated_at')
            .eq('id', '6403f9d2-e846-4c70-87e0-e051127d9500')
            .single();

        if (error2) {
            console.log('‚ùå Error en verificaci√≥n 2:', error2.message);
        } else {
            const coincide2 = verificacion2.name === datosTest.name;
            console.log(`   ‚îî‚îÄ Resultado: ${coincide2 ? '‚úÖ DATOS PERSISTEN' : '‚ùå DATOS NO PERSISTEN'}`);
        }

        // Verificaci√≥n 3: Con nueva conexi√≥n
        console.log('üîç Verificaci√≥n 3: Con nueva conexi√≥n...');
        const supabaseNuevo = createClient(SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY);
        const { data: verificacion3, error: error3 } = await supabaseNuevo
            .from('users')
            .select('name, phone, bio, location, updated_at')
            .eq('id', '6403f9d2-e846-4c70-87e0-e051127d9500')
            .single();

        if (error3) {
            console.log('‚ùå Error en verificaci√≥n 3:', error3.message);
        } else {
            const coincide3 = verificacion3.name === datosTest.name;
            console.log(`   ‚îî‚îÄ Resultado: ${coincide3 ? '‚úÖ DATOS PERSISTEN' : '‚ùå DATOS NO PERSISTEN'}`);
        }

        // =====================================================
        // PASO 5: AN√ÅLISIS FINAL Y RECOMENDACIONES
        // =====================================================
        console.log('');
        console.log('üìä AN√ÅLISIS FINAL Y RECOMENDACIONES');
        console.log('='.repeat(70));

        const persistenciaCorrecta = 
            verificacion1 && verificacion1.name === datosTest.name &&
            verificacion2 && verificacion2.name === datosTest.name &&
            verificacion3 && verificacion3.name === datosTest.name;

        if (persistenciaCorrecta) {
            console.log('‚úÖ PERSISTENCIA FUNCIONA CORRECTAMENTE EN BASE DE DATOS');
            console.log('');
            console.log('üí° CONCLUSI√ìN: El problema NO est√° en la base de datos');
            console.log('');
            console.log('üéØ POSIBLES CAUSAS DEL PROBLEMA:');
            console.log('   1. üåê Cache del navegador');
            console.log('   2. üîÑ Estado del frontend (React state)');
            console.log('   3. üì± Problemas de sincronizaci√≥n en la UI');
            console.log('   4. üîå Problemas de conexi√≥n intermitente');
            console.log('');
            console.log('üîß SOLUCIONES RECOMENDADAS:');
            console.log('   1. Limpiar cache del navegador (Ctrl+Shift+R)');
            console.log('   2. Verificar que el frontend actualice el estado despu√©s del UPDATE');
            console.log('   3. Agregar refresh autom√°tico despu√©s de actualizar perfil');
            console.log('   4. Implementar loading states y confirmaciones visuales');
            
            solucion.problema_identificado = 'Problema de frontend/cache, no de base de datos';
            solucion.causa_raiz = 'Base de datos funciona correctamente, problema en UI';
            solucion.solucion_aplicada = 'Verificaci√≥n completa de persistencia - BD OK';
            solucion.resultado_final = '√âXITO - Problema identificado como frontend/cache';
            
        } else {
            console.log('‚ùå PROBLEMA DE PERSISTENCIA CONFIRMADO EN BASE DE DATOS');
            console.log('');
            console.log('üîç AN√ÅLISIS DETALLADO:');
            
            if (verificacion1 && verificacion1.name !== datosTest.name) {
                console.log('   ‚îî‚îÄ Verificaci√≥n 1 fall√≥: Problema inmediato despu√©s de UPDATE');
            }
            if (verificacion2 && verificacion2.name !== datosTest.name) {
                console.log('   ‚îî‚îÄ Verificaci√≥n 2 fall√≥: Problema persiste despu√©s de espera');
            }
            if (verificacion3 && verificacion3.name !== datosTest.name) {
                console.log('   ‚îî‚îÄ Verificaci√≥n 3 fall√≥: Problema persiste con nueva conexi√≥n');
            }
            
            console.log('');
            console.log('üîß SOLUCIONES REQUERIDAS:');
            console.log('   1. Revisar pol√≠ticas RLS UPDATE m√°s detalladamente');
            console.log('   2. Verificar triggers en tabla users');
            console.log('   3. Revisar constraints de la tabla');
            console.log('   4. Verificar permisos de usuario');
            
            solucion.problema_identificado = 'Problema real de persistencia en base de datos';
            solucion.causa_raiz = 'Datos no se guardan correctamente en Supabase';
            solucion.solucion_aplicada = 'Diagn√≥stico completo - requiere investigaci√≥n adicional';
            solucion.resultado_final = 'PROBLEMA CONFIRMADO - Requiere soluci√≥n adicional';
        }

        solucion.pasos_ejecutados.push({
            paso: 'verificacion_multiple',
            resultado: persistenciaCorrecta ? 'exitoso' : 'fallido',
            persistencia_correcta: persistenciaCorrecta
        });

        // Guardar resultados
        const fs = require('fs');
        fs.writeFileSync(
            'solucion-persistencia-perfil-resultado.json',
            JSON.stringify(solucion, null, 2)
        );

        console.log('');
        console.log('üíæ Resultados guardados en: solucion-persistencia-perfil-resultado.json');
        console.log('‚úÖ AN√ÅLISIS DE SOLUCI√ìN COMPLETADO');

        return solucion;

    } catch (error) {
        console.error('‚ùå Error cr√≠tico en soluci√≥n:', error.message);
        solucion.problema_identificado = 'Error cr√≠tico en an√°lisis';
        solucion.causa_raiz = error.message;
        return solucion;
    }
}

// Ejecutar soluci√≥n
if (require.main === module) {
    solucionarPersistenciaPerfil().catch(console.error);
}

module.exports = { solucionarPersistenciaPerfil };
