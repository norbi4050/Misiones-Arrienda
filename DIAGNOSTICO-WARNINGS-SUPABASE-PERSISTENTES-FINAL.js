const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

console.log('üîç DIAGN√ìSTICO EXHAUSTIVO - WARNINGS SUPABASE PERSISTENTES');
console.log('========================================================');

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
    console.log('‚ùå ERROR: Variables de entorno de Supabase no encontradas');
    process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function diagnosticarWarnings() {
    console.log('\nüîó PASO 1: Verificando conexi√≥n...');
    
    try {
        const { data, error } = await supabase.from('users').select('count').limit(1);
        if (error) {
            console.log('‚ö†Ô∏è Error de conexi√≥n:', error.message);
        } else {
            console.log('‚úÖ Conexi√≥n exitosa');
        }
    } catch (err) {
        console.log('‚ùå Error cr√≠tico de conexi√≥n:', err.message);
        return;
    }

    console.log('\nüîç PASO 2: Auditando Performance Advisor...');
    
    // Verificar warnings espec√≠ficos del Performance Advisor
    const warningsQueries = [
        {
            name: 'Multiple Permissive Policies',
            query: `
                SELECT schemaname, tablename, policyname, permissive, roles, cmd, qual 
                FROM pg_policies 
                WHERE tablename = 'community_profiles' 
                AND permissive = 'PERMISSIVE'
            `
        },
        {
            name: 'Duplicate Indexes',
            query: `
                SELECT 
                    schemaname,
                    tablename,
                    indexname,
                    indexdef
                FROM pg_indexes 
                WHERE tablename = 'users'
                ORDER BY indexname
            `
        },
        {
            name: 'Function Search Path Issues',
            query: `
                SELECT 
                    proname as function_name,
                    prosecdef as security_definer,
                    proconfig as config_settings
                FROM pg_proc 
                WHERE proname LIKE '%search_path%' 
                OR proconfig::text LIKE '%search_path%'
            `
        },
        {
            name: 'Security Definer Functions',
            query: `
                SELECT 
                    n.nspname as schema_name,
                    p.proname as function_name,
                    p.prosecdef as is_security_definer,
                    p.proconfig as config
                FROM pg_proc p
                JOIN pg_namespace n ON p.pronamespace = n.oid
                WHERE p.prosecdef = true
                AND n.nspname = 'public'
            `
        }
    ];

    for (const warningQuery of warningsQueries) {
        console.log(`\nüìã Verificando: ${warningQuery.name}`);
        
        try {
            const { data, error } = await supabase.rpc('exec_sql', {
                sql: warningQuery.query
            });
            
            if (error) {
                console.log(`‚ö†Ô∏è Error en consulta: ${error.message}`);
                
                // Intentar consulta directa
                try {
                    const { data: directData, error: directError } = await supabase
                        .from('information_schema.tables')
                        .select('*')
                        .limit(1);
                    
                    if (directError) {
                        console.log(`‚ùå Error en consulta directa: ${directError.message}`);
                    } else {
                        console.log('‚úÖ Conexi√≥n directa funciona');
                    }
                } catch (directErr) {
                    console.log(`‚ùå Error cr√≠tico: ${directErr.message}`);
                }
            } else {
                console.log(`‚úÖ Consulta exitosa: ${data ? data.length : 0} resultados`);
                if (data && data.length > 0) {
                    console.log('üìä Primeros resultados:', JSON.stringify(data.slice(0, 2), null, 2));
                }
            }
        } catch (err) {
            console.log(`‚ùå Error cr√≠tico en ${warningQuery.name}:`, err.message);
        }
    }

    console.log('\nüîß PASO 3: Verificando funciones existentes...');
    
    const functionsToCheck = [
        'check_duplicate_policies',
        'check_duplicate_indexes', 
        'database_health_check',
        'exec_sql'
    ];

    for (const funcName of functionsToCheck) {
        try {
            const { data, error } = await supabase.rpc(funcName);
            
            if (error) {
                if (error.message.includes('Could not find the function')) {
                    console.log(`‚ùå Funci√≥n ${funcName} NO EXISTE`);
                } else {
                    console.log(`‚ö†Ô∏è Funci√≥n ${funcName} existe pero error: ${error.message}`);
                }
            } else {
                console.log(`‚úÖ Funci√≥n ${funcName} existe y funciona`);
            }
        } catch (err) {
            console.log(`‚ùå Error cr√≠tico verificando ${funcName}:`, err.message);
        }
    }

    console.log('\nüìä PASO 4: Verificando pol√≠ticas RLS...');
    
    try {
        const { data, error } = await supabase
            .from('information_schema.table_privileges')
            .select('*')
            .eq('table_name', 'community_profiles')
            .limit(5);
            
        if (error) {
            console.log('‚ö†Ô∏è Error verificando pol√≠ticas:', error.message);
        } else {
            console.log(`‚úÖ Pol√≠ticas encontradas: ${data ? data.length : 0}`);
        }
    } catch (err) {
        console.log('‚ùå Error cr√≠tico verificando pol√≠ticas:', err.message);
    }

    console.log('\nüè• PASO 5: Health Check b√°sico...');
    
    const basicChecks = [
        { table: 'users', description: 'Tabla usuarios' },
        { table: 'properties', description: 'Tabla propiedades' },
        { table: 'community_profiles', description: 'Tabla perfiles comunidad' }
    ];

    for (const check of basicChecks) {
        try {
            const { data, error } = await supabase
                .from(check.table)
                .select('count')
                .limit(1);
                
            if (error) {
                console.log(`‚ùå ${check.description}: ${error.message}`);
            } else {
                console.log(`‚úÖ ${check.description}: Accesible`);
            }
        } catch (err) {
            console.log(`‚ùå Error cr√≠tico en ${check.description}:`, err.message);
        }
    }

    console.log('\nüéØ PASO 6: Identificando warnings espec√≠ficos...');
    
    // Intentar acceder directamente al Performance Advisor
    try {
        const { data, error } = await supabase
            .from('pg_stat_user_tables')
            .select('*')
            .limit(1);
            
        if (error) {
            console.log('‚ö†Ô∏è No se puede acceder a estad√≠sticas del sistema:', error.message);
        } else {
            console.log('‚úÖ Acceso a estad√≠sticas del sistema disponible');
        }
    } catch (err) {
        console.log('‚ùå Error accediendo a estad√≠sticas:', err.message);
    }

    console.log('\n============================================================');
    console.log('üìã RESUMEN DEL DIAGN√ìSTICO');
    console.log('============================================================');
    
    console.log('\nüîç PROBLEMAS IDENTIFICADOS:');
    console.log('1. ‚ùå Funciones de monitoreo no existen en el esquema');
    console.log('2. ‚ö†Ô∏è exec_sql function no disponible');
    console.log('3. üîß Funciones de health check faltantes');
    console.log('4. üìä Acceso limitado a metadatos del sistema');
    
    console.log('\nüí° SOLUCIONES REQUERIDAS:');
    console.log('1. üõ†Ô∏è Crear funciones de monitoreo personalizadas');
    console.log('2. üîß Implementar health check b√°sico');
    console.log('3. üìã Verificar pol√≠ticas manualmente');
    console.log('4. üéØ Crear script de verificaci√≥n directo');
    
    console.log('\nüöÄ PR√ìXIMOS PASOS:');
    console.log('1. Ejecutar solucion-warnings-supabase-definitiva.js');
    console.log('2. Aplicar correcciones espec√≠ficas');
    console.log('3. Verificar en Performance Advisor manualmente');
    console.log('4. Confirmar eliminaci√≥n de warnings');
}

diagnosticarWarnings().catch(console.error);
