// =====================================================
// VERIFICACI√ìN DIRECTA: WARNINGS ACTUALES EN SUPABASE
// =====================================================
// Fecha: 2025-01-27
// Objetivo: Verificar exactamente qu√© warnings est√°n presentes
// =====================================================

const { createClient } = require('@supabase/supabase-js');

// Configuraci√≥n de Supabase
const SUPABASE_URL = 'https://qfeyhaaxyemmnohqdele.supabase.co';
const SUPABASE_SERVICE_ROLE_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InFmZXloYWF4eWVtbW5vaHFkZWxlIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NTgxNjczOCwiZXhwIjoyMDcxMzkyNzM4fQ.5wJb1p0Rmg1dVIayIT4wZO_seDXTIwhVa36CyEgK-yM';

const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY);

async function verificarWarningsActuales() {
    console.log('üîç VERIFICANDO WARNINGS ACTUALES EN SUPABASE');
    console.log('=' .repeat(50));
    console.log(`‚è∞ Timestamp: ${new Date().toISOString()}`);
    console.log('=' .repeat(50));
    console.log('');

    try {
        // ====================================================================
        console.log('üìã PASO 1: VERIFICAR POL√çTICAS M√öLTIPLES ACTUALES');
        console.log('-'.repeat(40));

        const { data: politicasMultiples, error: politicasError } = await supabase.rpc('sql', {
            query: `
                SELECT 
                    schemaname,
                    tablename,
                    cmd,
                    COUNT(*) as policy_count,
                    array_agg(policyname) as policy_names,
                    array_agg(roles) as all_roles
                FROM pg_policies 
                WHERE schemaname = 'public'
                GROUP BY schemaname, tablename, cmd
                ORDER BY tablename, cmd;
            `
        });

        if (politicasError) {
            console.log('‚ùå Error obteniendo pol√≠ticas:', politicasError.message);
        } else {
            console.log(`üìä Total de grupos de pol√≠ticas: ${politicasMultiples.length}`);
            
            let warningsMultiples = 0;
            politicasMultiples.forEach(pol => {
                if (pol.policy_count > 1) {
                    warningsMultiples++;
                    console.log(`‚ö†Ô∏è M√öLTIPLES POL√çTICAS DETECTADAS:`);
                    console.log(`   üìã Tabla: ${pol.tablename}`);
                    console.log(`   üîß Acci√≥n: ${pol.cmd}`);
                    console.log(`   üìä Cantidad: ${pol.policy_count}`);
                    console.log(`   üìù Pol√≠ticas: ${pol.policy_names.join(', ')}`);
                    console.log(`   üë• Roles: ${pol.all_roles.join(', ')}`);
                    console.log('');
                }
            });

            if (warningsMultiples === 0) {
                console.log('‚úÖ No se encontraron pol√≠ticas m√∫ltiples');
            } else {
                console.log(`üö® TOTAL WARNINGS M√öLTIPLES: ${warningsMultiples}`);
            }
        }

        console.log('');

        // ====================================================================
        console.log('üìã PASO 2: VERIFICAR √çNDICES DUPLICADOS ACTUALES');
        console.log('-'.repeat(40));

        const { data: indicesDuplicados, error: indicesError } = await supabase.rpc('sql', {
            query: `
                SELECT 
                    schemaname,
                    tablename,
                    indexdef,
                    COUNT(*) as index_count,
                    array_agg(indexname) as index_names
                FROM pg_indexes 
                WHERE schemaname = 'public'
                GROUP BY schemaname, tablename, indexdef
                HAVING COUNT(*) > 1
                ORDER BY tablename;
            `
        });

        if (indicesError) {
            console.log('‚ùå Error obteniendo √≠ndices:', indicesError.message);
        } else {
            if (indicesDuplicados.length === 0) {
                console.log('‚úÖ No se encontraron √≠ndices duplicados');
            } else {
                console.log(`üö® √çNDICES DUPLICADOS ENCONTRADOS: ${indicesDuplicados.length}`);
                indicesDuplicados.forEach(idx => {
                    console.log(`‚ö†Ô∏è √çNDICES DUPLICADOS:`);
                    console.log(`   üìã Tabla: ${idx.tablename}`);
                    console.log(`   üìä Cantidad: ${idx.index_count}`);
                    console.log(`   üìù √çndices: ${idx.index_names.join(', ')}`);
                    console.log(`   üîß Definici√≥n: ${idx.indexdef}`);
                    console.log('');
                });
            }
        }

        console.log('');

        // ====================================================================
        console.log('üìã PASO 3: VERIFICAR TABLAS EXISTENTES');
        console.log('-'.repeat(40));

        const tablasVerificar = ['users', 'favorites', 'properties', 'property_inquiries'];
        
        for (const tabla of tablasVerificar) {
            const { data: existeTabla, error: tablaError } = await supabase.rpc('sql', {
                query: `
                    SELECT EXISTS (
                        SELECT FROM information_schema.tables 
                        WHERE table_schema = 'public' 
                        AND table_name = '${tabla}'
                    ) as existe;
                `
            });

            if (tablaError) {
                console.log(`‚ùå Error verificando tabla ${tabla}:`, tablaError.message);
            } else {
                const existe = existeTabla[0].existe;
                console.log(`${existe ? '‚úÖ' : '‚ùå'} Tabla ${tabla}: ${existe ? 'EXISTE' : 'NO EXISTE'}`);
                
                if (existe) {
                    // Contar pol√≠ticas de esta tabla
                    const { data: politicasTabla, error: polError } = await supabase.rpc('sql', {
                        query: `
                            SELECT COUNT(*) as total_policies
                            FROM pg_policies 
                            WHERE schemaname = 'public' AND tablename = '${tabla}';
                        `
                    });

                    if (!polError) {
                        console.log(`   üìä Pol√≠ticas: ${politicasTabla[0].total_policies}`);
                    }
                }
            }
        }

        console.log('');

        // ====================================================================
        console.log('üìã PASO 4: RESUMEN DE WARNINGS ACTUALES');
        console.log('-'.repeat(40));

        const totalWarnings = warningsMultiples + (indicesDuplicados ? indicesDuplicados.length : 0);
        
        console.log(`üö® RESUMEN FINAL:`);
        console.log(`   ‚ö†Ô∏è Pol√≠ticas m√∫ltiples: ${warningsMultiples}`);
        console.log(`   ‚ö†Ô∏è √çndices duplicados: ${indicesDuplicados ? indicesDuplicados.length : 0}`);
        console.log(`   üìä Total warnings: ${totalWarnings}`);

        if (totalWarnings > 0) {
            console.log('');
            console.log('üîß ACCI√ìN REQUERIDA: Los warnings a√∫n est√°n presentes');
            console.log('üí° Necesitamos aplicar una soluci√≥n m√°s espec√≠fica');
        } else {
            console.log('');
            console.log('‚úÖ √âXITO: No se encontraron warnings');
        }

        console.log('');
        console.log('‚úÖ VERIFICACI√ìN COMPLETADA');

        // Guardar resultados
        const fs = require('fs');
        const resultado = {
            timestamp: new Date().toISOString(),
            warningsMultiples: warningsMultiples,
            indicesDuplicados: indicesDuplicados ? indicesDuplicados.length : 0,
            totalWarnings: totalWarnings,
            detalles: {
                politicasMultiples: politicasMultiples,
                indicesDuplicados: indicesDuplicados
            }
        };

        fs.writeFileSync('Blackbox/WARNINGS-ACTUALES-SUPABASE.json', JSON.stringify(resultado, null, 2));
        console.log('üìÑ Reporte guardado en: Blackbox/WARNINGS-ACTUALES-SUPABASE.json');

        return resultado;

    } catch (error) {
        console.log('‚ùå ERROR DURANTE LA VERIFICACI√ìN:', error.message);
        return null;
    }
}

// Ejecutar verificaci√≥n
if (require.main === module) {
    verificarWarningsActuales().catch(console.error);
}

module.exports = { verificarWarningsActuales };
