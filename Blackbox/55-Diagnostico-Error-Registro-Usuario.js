// 55. DIAGN√ìSTICO ERROR REGISTRO USUARIO
// Fecha: 9 de Enero 2025
// Objetivo: Diagnosticar y solucionar el error "Database error saving new user"

console.log('üîç INICIANDO DIAGN√ìSTICO ERROR REGISTRO USUARIO');
console.log('================================================');

const diagnosticarErrorRegistro = async () => {
  console.log('\nüìã AN√ÅLISIS DEL ERROR REPORTADO:');
  console.log('Error: "Database error saving new user"');
  console.log('Ubicaci√≥n: Formulario de registro de usuarios');
  
  console.log('\nüîç POSIBLES CAUSAS IDENTIFICADAS:');
  
  console.log('\n1. PROBLEMA DE CONEXI√ìN SUPABASE:');
  console.log('   ‚ùå Variables de entorno incorrectas o faltantes');
  console.log('   ‚ùå NEXT_PUBLIC_SUPABASE_URL no configurada');
  console.log('   ‚ùå SUPABASE_SERVICE_ROLE_KEY no configurada');
  console.log('   ‚ùå Conexi√≥n de red bloqueada');
  
  console.log('\n2. PROBLEMA DE ESQUEMA DE BASE DE DATOS:');
  console.log('   ‚ùå Tabla "users" no existe en Supabase');
  console.log('   ‚ùå Campos faltantes en la tabla users');
  console.log('   ‚ùå Tipos de datos incorrectos');
  console.log('   ‚ùå Restricciones de base de datos violadas');
  
  console.log('\n3. PROBLEMA DE POL√çTICAS RLS (Row Level Security):');
  console.log('   ‚ùå Pol√≠ticas de inserci√≥n no configuradas');
  console.log('   ‚ùå Permisos insuficientes para service role');
  console.log('   ‚ùå RLS habilitado sin pol√≠ticas apropiadas');
  
  console.log('\n4. PROBLEMA DE VALIDACI√ìN DE DATOS:');
  console.log('   ‚ùå Datos requeridos faltantes');
  console.log('   ‚ùå Formato de email inv√°lido');
  console.log('   ‚ùå Contrase√±a muy corta');
  console.log('   ‚ùå Tipo de usuario inv√°lido');
  
  console.log('\n5. PROBLEMA DE DUPLICACI√ìN:');
  console.log('   ‚ùå Usuario ya existe con el mismo email');
  console.log('   ‚ùå Conflicto de ID √∫nico');
  console.log('   ‚ùå Violaci√≥n de restricci√≥n UNIQUE');
  
  console.log('\nüìä AN√ÅLISIS DEL C√ìDIGO ACTUAL:');
  console.log('Archivo: Backend/src/app/api/auth/register/route.ts');
  
  console.log('\n‚úÖ VALIDACIONES IMPLEMENTADAS:');
  console.log('   ‚úì Validaci√≥n de campos requeridos');
  console.log('   ‚úì Validaci√≥n de formato de email');
  console.log('   ‚úì Validaci√≥n de longitud de contrase√±a');
  console.log('   ‚úì Validaci√≥n de tipo de usuario');
  console.log('   ‚úì Verificaci√≥n de usuario existente');
  
  console.log('\nüîß MANEJO DE ERRORES ACTUAL:');
  console.log('   ‚úì Try-catch general implementado');
  console.log('   ‚úì Logging detallado con console.log');
  console.log('   ‚úì Rollback en caso de error de perfil');
  console.log('   ‚úì Mensajes de error espec√≠ficos');
  
  console.log('\n‚ö†Ô∏è PUNTOS CR√çTICOS IDENTIFICADOS:');
  
  console.log('\n1. MANEJO DE ERRORES DE SUPABASE:');
  console.log('   - El error gen√©rico puede ocultar problemas espec√≠ficos');
  console.log('   - Necesita logging m√°s detallado de errores de Supabase');
  
  console.log('\n2. VERIFICACI√ìN DE VARIABLES DE ENTORNO:');
  console.log('   - No hay verificaci√≥n expl√≠cita de variables requeridas');
  console.log('   - Podr√≠a fallar silenciosamente si las variables est√°n mal');
  
  console.log('\n3. ESTRUCTURA DE BASE DE DATOS:');
  console.log('   - Asume que la tabla users existe y tiene la estructura correcta');
  console.log('   - No verifica la existencia de campos antes de insertar');
  
  console.log('\nüõ†Ô∏è SOLUCIONES PROPUESTAS:');
  
  console.log('\n1. VERIFICACI√ìN DE VARIABLES DE ENTORNO:');
  console.log('   - Agregar validaci√≥n expl√≠cita al inicio');
  console.log('   - Retornar error espec√≠fico si faltan variables');
  
  console.log('\n2. LOGGING MEJORADO:');
  console.log('   - Capturar y loggear errores espec√≠ficos de Supabase');
  console.log('   - Incluir detalles del error en respuesta de desarrollo');
  
  console.log('\n3. VALIDACI√ìN DE ESQUEMA:');
  console.log('   - Verificar existencia de tabla users');
  console.log('   - Validar estructura de campos requeridos');
  
  console.log('\n4. MANEJO DE ERRORES ESPEC√çFICOS:');
  console.log('   - Detectar errores de conexi√≥n vs errores de datos');
  console.log('   - Proporcionar mensajes de error m√°s √∫tiles');
  
  console.log('\n5. TESTING DE CONEXI√ìN:');
  console.log('   - Implementar endpoint de health check');
  console.log('   - Verificar conectividad antes del registro');
  
  return {
    status: 'DIAGN√ìSTICO_COMPLETADO',
    problemasIdentificados: [
      'Variables de entorno no verificadas',
      'Logging insuficiente de errores Supabase',
      'Falta validaci√≥n de esquema de BD',
      'Manejo gen√©rico de errores',
      'Sin verificaci√≥n de conectividad'
    ],
    solucionesRecomendadas: [
      'Implementar verificaci√≥n de variables',
      'Mejorar logging de errores',
      'Agregar validaci√≥n de esquema',
      'Implementar manejo espec√≠fico de errores',
      'Crear endpoint de health check'
    ]
  };
};

// Ejecutar diagn√≥stico
diagnosticarErrorRegistro()
  .then(resultado => {
    console.log('\nüéØ RESULTADO DEL DIAGN√ìSTICO:');
    console.log('Status:', resultado.status);
    console.log('\nüìã PROBLEMAS IDENTIFICADOS:');
    resultado.problemasIdentificados.forEach((problema, index) => {
      console.log(`   ${index + 1}. ${problema}`);
    });
    console.log('\nüí° SOLUCIONES RECOMENDADAS:');
    resultado.solucionesRecomendadas.forEach((solucion, index) => {
      console.log(`   ${index + 1}. ${solucion}`);
    });
    
    console.log('\nüîß PR√ìXIMOS PASOS:');
    console.log('1. Ejecutar script de correcci√≥n de errores');
    console.log('2. Verificar variables de entorno');
    console.log('3. Probar registro con datos de prueba');
    console.log('4. Implementar mejoras de logging');
    console.log('5. Crear endpoint de health check');
    
    console.log('\n‚úÖ DIAGN√ìSTICO COMPLETADO EXITOSAMENTE');
  })
  .catch(error => {
    console.error('‚ùå Error en diagn√≥stico:', error);
  });

// Funci√≥n para verificar variables de entorno
const verificarVariablesEntorno = () => {
  console.log('\nüîç VERIFICANDO VARIABLES DE ENTORNO:');
  
  const variablesRequeridas = [
    'NEXT_PUBLIC_SUPABASE_URL',
    'SUPABASE_SERVICE_ROLE_KEY'
  ];
  
  const variablesFaltantes = [];
  
  variablesRequeridas.forEach(variable => {
    if (process.env[variable]) {
      console.log(`   ‚úÖ ${variable}: CONFIGURADA`);
    } else {
      console.log(`   ‚ùå ${variable}: FALTANTE`);
      variablesFaltantes.push(variable);
    }
  });
  
  if (variablesFaltantes.length > 0) {
    console.log('\n‚ö†Ô∏è VARIABLES FALTANTES DETECTADAS:');
    variablesFaltantes.forEach(variable => {
      console.log(`   - ${variable}`);
    });
    console.log('\nüìù ACCI√ìN REQUERIDA:');
    console.log('   1. Configurar variables en archivo .env.local');
    console.log('   2. Reiniciar servidor de desarrollo');
    console.log('   3. Verificar configuraci√≥n en Vercel (producci√≥n)');
  } else {
    console.log('\n‚úÖ TODAS LAS VARIABLES EST√ÅN CONFIGURADAS');
  }
  
  return variablesFaltantes;
};

// Funci√≥n para generar c√≥digo de correcci√≥n
const generarCodigoCorreccion = () => {
  console.log('\nüõ†Ô∏è GENERANDO C√ìDIGO DE CORRECCI√ìN:');
  
  const codigoMejorado = `
// VERSI√ìN MEJORADA DEL ENDPOINT DE REGISTRO
import { NextRequest, NextResponse } from 'next/server'
import { createClient } from '@supabase/supabase-js'

export async function POST(request: NextRequest) {
  try {
    console.log('üöÄ Iniciando proceso de registro mejorado...');
    
    // 1. VERIFICAR VARIABLES DE ENTORNO
    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
    const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;
    
    if (!supabaseUrl || !supabaseServiceKey) {
      console.error('‚ùå Variables de entorno faltantes');
      return NextResponse.json(
        { 
          error: 'Configuraci√≥n del servidor incompleta',
          details: 'Variables de entorno de Supabase no configuradas'
        },
        { status: 500 }
      );
    }
    
    console.log('‚úÖ Variables de entorno verificadas');
    
    // 2. OBTENER Y VALIDAR DATOS
    const body = await request.json();
    const { name, email, phone, password, userType, companyName, licenseNumber, propertyCount } = body;
    
    console.log(\`üìù Datos recibidos: \${JSON.stringify({ name, email, userType }, null, 2)}\`);
    
    // Validaciones b√°sicas...
    if (!name || !email || !phone || !password || !userType) {
      return NextResponse.json(
        { error: 'Todos los campos b√°sicos son requeridos' },
        { status: 400 }
      );
    }
    
    // 3. CREAR CLIENTE SUPABASE CON MANEJO DE ERRORES
    let supabase;
    try {
      supabase = createClient(supabaseUrl, supabaseServiceKey, {
        auth: {
          autoRefreshToken: false,
          persistSession: false
        }
      });
      console.log('‚úÖ Cliente Supabase creado exitosamente');
    } catch (clientError) {
      console.error('‚ùå Error creando cliente Supabase:', clientError);
      return NextResponse.json(
        { 
          error: 'Error de configuraci√≥n de base de datos',
          details: process.env.NODE_ENV === 'development' ? String(clientError) : undefined
        },
        { status: 500 }
      );
    }
    
    // 4. VERIFICAR CONECTIVIDAD CON HEALTH CHECK
    try {
      const { data: healthCheck } = await supabase.from('users').select('count').limit(1);
      console.log('‚úÖ Conectividad con Supabase verificada');
    } catch (connectError) {
      console.error('‚ùå Error de conectividad con Supabase:', connectError);
      return NextResponse.json(
        { 
          error: 'Error de conexi√≥n con base de datos',
          details: process.env.NODE_ENV === 'development' ? String(connectError) : undefined
        },
        { status: 503 }
      );
    }
    
    // 5. RESTO DEL C√ìDIGO DE REGISTRO...
    // (Contin√∫a con la l√≥gica existente pero con mejor manejo de errores)
    
  } catch (error) {
    console.error('‚ùå Error general en registro:', error);
    
    // Logging detallado del error
    if (error instanceof Error) {
      console.error('Error name:', error.name);
      console.error('Error message:', error.message);
      console.error('Error stack:', error.stack);
    }
    
    return NextResponse.json(
      { 
        error: 'Database error saving new user',
        details: process.env.NODE_ENV === 'development' ? String(error) : undefined,
        timestamp: new Date().toISOString()
      },
      { status: 500 }
    );
  }
}`;
  
  console.log('‚úÖ C√≥digo de correcci√≥n generado');
  return codigoMejorado;
};

// Ejecutar verificaci√≥n de variables
verificarVariablesEntorno();

// Generar c√≥digo de correcci√≥n
generarCodigoCorreccion();

console.log('\nüéâ DIAGN√ìSTICO COMPLETO FINALIZADO');
console.log('üìÑ Revisar archivo: Blackbox/56-Solucion-Error-Registro-Usuario.ts');
