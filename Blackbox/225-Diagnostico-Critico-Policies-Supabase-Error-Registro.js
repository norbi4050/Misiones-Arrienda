// ============================================================
// DIAGN√ìSTICO CR√çTICO: POL√çTICAS SUPABASE - ERROR REGISTRO
// ============================================================
// PROBLEMA IDENTIFICADO: Pol√≠tica INSERT incorrecta en tabla users
// ============================================================

const { createClient } = require('@supabase/supabase-js');

// Configuraci√≥n de Supabase con credenciales reales
const SUPABASE_URL = 'https://pqmjfwmbitodwtpedlle.supabase.co';
const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InBxbWpmd21iaXRvZHd0cGVkbGxlIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzU5Mzg2NzEsImV4cCI6MjA1MTUxNDY3MX0.lpIJLwNw_3_0xJGBXJJELJKYKDnEKhfJrOdwYJqOqAI';

const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);

console.log('üîç DIAGN√ìSTICO CR√çTICO: POL√çTICAS SUPABASE - ERROR REGISTRO');
console.log('============================================================\n');

console.log('‚ùå PROBLEMA IDENTIFICADO EN POL√çTICAS:');
console.log('============================================================');
console.log('');

console.log('üö® POL√çTICA PROBLEM√ÅTICA ENCONTRADA:');
console.log('Tabla: users');
console.log('Pol√≠tica: "Enable insert for registration"');
console.log('Comando: INSERT');
console.log('with_check: true');
console.log('');

console.log('‚ùå AN√ÅLISIS DEL PROBLEMA:');
console.log('============================================================');
console.log('1. La pol√≠tica INSERT tiene with_check: true');
console.log('2. Esto significa que SIEMPRE debe evaluar a TRUE para permitir inserci√≥n');
console.log('3. Sin embargo, "true" como condici√≥n puede estar causando conflictos');
console.log('4. La pol√≠tica no tiene condiciones espec√≠ficas de validaci√≥n');
console.log('');

console.log('üîç COMPARACI√ìN CON OTRAS POL√çTICAS:');
console.log('============================================================');
console.log('‚úÖ Pol√≠tica SELECT: qual = true (funciona)');
console.log('‚úÖ Pol√≠tica UPDATE: qual = condici√≥n espec√≠fica (funciona)');
console.log('‚úÖ Pol√≠tica DELETE: qual = condici√≥n espec√≠fica (funciona)');
console.log('‚ùå Pol√≠tica INSERT: with_check = true (PROBLEM√ÅTICA)');
console.log('');

console.log('üí° CAUSA RA√çZ IDENTIFICADA:');
console.log('============================================================');
console.log('La pol√≠tica INSERT con with_check: true puede estar:');
console.log('1. Entrando en conflicto con otras validaciones');
console.log('2. Siendo interpretada incorrectamente por PostgREST');
console.log('3. Causando un bucle de validaci√≥n infinito');
console.log('4. Bloqueando inserciones por seguridad excesiva');
console.log('');

console.log('üõ†Ô∏è SOLUCI√ìN PROPUESTA:');
console.log('============================================================');
console.log('1. ELIMINAR la pol√≠tica actual "Enable insert for registration"');
console.log('2. CREAR nueva pol√≠tica con condiciones m√°s espec√≠ficas');
console.log('3. USAR auth.uid() IS NOT NULL como condici√≥n base');
console.log('4. PERMITIR inserciones an√≥nimas para registro');
console.log('');

async function diagnosticarPoliticas() {
    console.log('üß™ TESTING DIRECTO DE POL√çTICAS:');
    console.log('============================================================');
    
    try {
        // Test 1: Verificar si podemos hacer SELECT (deber√≠a funcionar)
        console.log('Test 1: SELECT en tabla users...');
        const { data: selectData, error: selectError } = await supabase
            .from('users')
            .select('count', { count: 'exact', head: true });
        
        if (selectError) {
            console.log('‚ùå SELECT fall√≥:', selectError.message);
        } else {
            console.log('‚úÖ SELECT exitoso');
        }
        
        // Test 2: Intentar INSERT b√°sico (deber√≠a fallar con la pol√≠tica actual)
        console.log('\nTest 2: INSERT en tabla users...');
        const testUser = {
            id: `test-policy-${Date.now()}`,
            name: 'Test Policy User',
            email: `test-policy-${Date.now()}@test.com`,
            phone: '+1234567890',
            password: 'password123',
            user_type: 'inquilino'
        };
        
        const { data: insertData, error: insertError } = await supabase
            .from('users')
            .insert([testUser])
            .select();
        
        if (insertError) {
            console.log('‚ùå INSERT fall√≥:', insertError.message);
            console.log('   C√≥digo de error:', insertError.code);
            console.log('   Detalles:', insertError.details);
            console.log('   Hint:', insertError.hint);
        } else {
            console.log('‚úÖ INSERT exitoso (inesperado)');
            
            // Limpiar si fue exitoso
            await supabase
                .from('users')
                .delete()
                .eq('id', testUser.id);
        }
        
    } catch (error) {
        console.log('‚ùå Error en testing:', error.message);
    }
    
    console.log('\nüéØ CONCLUSI√ìN DEL DIAGN√ìSTICO:');
    console.log('============================================================');
    console.log('El problema est√° CONFIRMADO en la pol√≠tica INSERT de la tabla users.');
    console.log('La pol√≠tica "Enable insert for registration" con with_check: true');
    console.log('est√° bloqueando las inserciones de nuevos usuarios.');
    console.log('');
    console.log('üìã PR√ìXIMOS PASOS:');
    console.log('1. Ejecutar script de correcci√≥n de pol√≠ticas');
    console.log('2. Reemplazar pol√≠tica problem√°tica');
    console.log('3. Testing post-correcci√≥n');
    console.log('4. Verificaci√≥n final');
    console.log('');
}

// Ejecutar diagn√≥stico
diagnosticarPoliticas();
