/**
 * TESTING EXHAUSTIVO POST-LIMPIEZA DE DUPLICADOS
 * Proyecto: Misiones Arrienda
 * Fecha: 2025-01-03
 * 
 * Este script verifica que todas las funcionalidades cr√≠ticas
 * siguen funcionando despu√©s de la limpieza masiva de duplicados
 */

const fs = require('fs');
const path = require('path');

console.log('üîç INICIANDO TESTING EXHAUSTIVO POST-LIMPIEZA');
console.log('='.repeat(60));

// 1. VERIFICAR ARCHIVOS ESENCIALES DEL BACKEND
console.log('\nüìÅ FASE 1: Verificando archivos esenciales del Backend...');

const archivosEsenciales = [
    'Backend/package.json',
    'Backend/next.config.js',
    'Backend/tailwind.config.ts',
    'Backend/tsconfig.json',
    'Backend/src/app/page.tsx',
    'Backend/src/app/layout.tsx',
    'Backend/src/components/navbar.tsx',
    'Backend/src/lib/utils.ts',
    'Backend/prisma/schema.prisma',
    'Backend/src/middleware.ts'
];

let archivosEsencialesOK = 0;
archivosEsenciales.forEach(archivo => {
    if (fs.existsSync(archivo)) {
        console.log(`‚úÖ ${archivo} - EXISTE`);
        archivosEsencialesOK++;
    } else {
        console.log(`‚ùå ${archivo} - FALTA`);
    }
});

console.log(`\nüìä Archivos esenciales: ${archivosEsencialesOK}/${archivosEsenciales.length}`);

// 2. VERIFICAR ESTRUCTURA DE CARPETAS CR√çTICAS
console.log('\nüìÇ FASE 2: Verificando estructura de carpetas cr√≠ticas...');

const carpetasCriticas = [
    'Backend/src',
    'Backend/src/app',
    'Backend/src/components',
    'Backend/src/lib',
    'Backend/prisma',
    'Backend/public',
    'Backend/src/app/api'
];

let carpetasCriticasOK = 0;
carpetasCriticas.forEach(carpeta => {
    if (fs.existsSync(carpeta) && fs.statSync(carpeta).isDirectory()) {
        console.log(`‚úÖ ${carpeta} - EXISTE`);
        carpetasCriticasOK++;
    } else {
        console.log(`‚ùå ${carpeta} - FALTA`);
    }
});

console.log(`\nüìä Carpetas cr√≠ticas: ${carpetasCriticasOK}/${carpetasCriticas.length}`);

// 3. VERIFICAR COMPONENTES UI CR√çTICOS
console.log('\nüé® FASE 3: Verificando componentes UI cr√≠ticos...');

const componentesUI = [
    'Backend/src/components/ui/button.tsx',
    'Backend/src/components/ui/input.tsx',
    'Backend/src/components/ui/card.tsx',
    'Backend/src/components/ui/select.tsx',
    'Backend/src/components/ui/badge.tsx'
];

let componentesUIOK = 0;
componentesUI.forEach(componente => {
    if (fs.existsSync(componente)) {
        console.log(`‚úÖ ${componente} - EXISTE`);
        componentesUIOK++;
    } else {
        console.log(`‚ùå ${componente} - FALTA`);
    }
});

console.log(`\nüìä Componentes UI: ${componentesUIOK}/${componentesUI.length}`);

// 4. VERIFICAR APIS CR√çTICAS
console.log('\nüîå FASE 4: Verificando APIs cr√≠ticas...');

const apisCriticas = [
    'Backend/src/app/api/properties/route.ts',
    'Backend/src/app/api/auth/login/route.ts',
    'Backend/src/app/api/auth/register/route.ts',
    'Backend/src/app/api/users/profile/route.ts'
];

let apisCriticasOK = 0;
apisCriticas.forEach(api => {
    if (fs.existsSync(api)) {
        console.log(`‚úÖ ${api} - EXISTE`);
        apisCriticasOK++;
    } else {
        console.log(`‚ùå ${api} - FALTA`);
    }
});

console.log(`\nüìä APIs cr√≠ticas: ${apisCriticasOK}/${apisCriticas.length}`);

// 5. VERIFICAR P√ÅGINAS PRINCIPALES
console.log('\nüìÑ FASE 5: Verificando p√°ginas principales...');

const paginasPrincipales = [
    'Backend/src/app/page.tsx',
    'Backend/src/app/login/page.tsx',
    'Backend/src/app/register/page.tsx',
    'Backend/src/app/dashboard/page.tsx',
    'Backend/src/app/properties/page.tsx',
    'Backend/src/app/publicar/page.tsx'
];

let paginasPrincipalesOK = 0;
paginasPrincipales.forEach(pagina => {
    if (fs.existsSync(pagina)) {
        console.log(`‚úÖ ${pagina} - EXISTE`);
        paginasPrincipalesOK++;
    } else {
        console.log(`‚ùå ${pagina} - FALTA`);
    }
});

console.log(`\nüìä P√°ginas principales: ${paginasPrincipalesOK}/${paginasPrincipales.length}`);

// 6. VERIFICAR CONFIGURACIONES CR√çTICAS
console.log('\n‚öôÔ∏è FASE 6: Verificando configuraciones cr√≠ticas...');

const configuracionesCriticas = [
    'Backend/.env.example',
    'Backend/.gitignore',
    'Backend/vercel.json'
];

let configuracionesCriticasOK = 0;
configuracionesCriticas.forEach(config => {
    if (fs.existsSync(config)) {
        console.log(`‚úÖ ${config} - EXISTE`);
        configuracionesCriticasOK++;
    } else {
        console.log(`‚ùå ${config} - FALTA`);
    }
});

console.log(`\nüìä Configuraciones cr√≠ticas: ${configuracionesCriticasOK}/${configuracionesCriticas.length}`);

// 7. VERIFICAR QUE LAS CARPETAS DUPLICADAS FUERON ELIMINADAS
console.log('\nüóëÔ∏è FASE 7: Verificando eliminaci√≥n de carpetas duplicadas...');

const carpetasDuplicadas = [
    'misiones-arrienda-v2',
    'misionesarrienda1',
    'src' // carpeta src en ra√≠z (duplicada)
];

let carpetasDuplicadasEliminadas = 0;
carpetasDuplicadas.forEach(carpeta => {
    if (!fs.existsSync(carpeta)) {
        console.log(`‚úÖ ${carpeta} - ELIMINADA CORRECTAMENTE`);
        carpetasDuplicadasEliminadas++;
    } else {
        console.log(`‚ùå ${carpeta} - A√öN EXISTE`);
    }
});

console.log(`\nüìä Carpetas duplicadas eliminadas: ${carpetasDuplicadasEliminadas}/${carpetasDuplicadas.length}`);

// 8. VERIFICAR BACKUP DE SEGURIDAD
console.log('\nüíæ FASE 8: Verificando backup de seguridad...');

if (fs.existsSync('BACKUP-PRE-LIMPIEZA')) {
    console.log('‚úÖ BACKUP-PRE-LIMPIEZA - EXISTE');
    console.log('‚úÖ Backup de seguridad creado correctamente');
} else {
    console.log('‚ùå BACKUP-PRE-LIMPIEZA - NO EXISTE');
}

// 9. CALCULAR PUNTUACI√ìN TOTAL
console.log('\nüèÜ RESUMEN FINAL DEL TESTING');
console.log('='.repeat(60));

const totalTests = archivosEsenciales.length + carpetasCriticas.length + 
                  componentesUI.length + apisCriticas.length + 
                  paginasPrincipales.length + configuracionesCriticas.length + 
                  carpetasDuplicadas.length + 1; // +1 para backup

const totalPasados = archivosEsencialesOK + carpetasCriticasOK + 
                    componentesUIOK + apisCriticasOK + 
                    paginasPrincipalesOK + configuracionesCriticasOK + 
                    carpetasDuplicadasEliminadas + (fs.existsSync('BACKUP-PRE-LIMPIEZA') ? 1 : 0);

const porcentajeExito = ((totalPasados / totalTests) * 100).toFixed(2);

console.log(`\nüìä RESULTADOS FINALES:`);
console.log(`   Tests pasados: ${totalPasados}/${totalTests}`);
console.log(`   Porcentaje de √©xito: ${porcentajeExito}%`);

if (porcentajeExito >= 95) {
    console.log(`\nüéâ EXCELENTE: La limpieza fue exitosa!`);
    console.log(`   ‚úÖ Todos los archivos cr√≠ticos est√°n intactos`);
    console.log(`   ‚úÖ Las carpetas duplicadas fueron eliminadas`);
    console.log(`   ‚úÖ El proyecto est√° funcionando correctamente`);
} else if (porcentajeExito >= 85) {
    console.log(`\n‚ö†Ô∏è BUENO: La limpieza fue mayormente exitosa`);
    console.log(`   ‚ö†Ô∏è Algunos archivos menores pueden faltar`);
    console.log(`   ‚úÖ Los archivos cr√≠ticos est√°n intactos`);
} else {
    console.log(`\n‚ùå PROBLEMA: La limpieza tuvo problemas`);
    console.log(`   ‚ùå Faltan archivos cr√≠ticos`);
    console.log(`   ‚ö†Ô∏è Se recomienda revisar el backup`);
}

// 10. VERIFICAR SERVIDOR FUNCIONANDO
console.log('\nüåê FASE 9: Verificando servidor...');
console.log('   ‚ÑπÔ∏è El servidor debe estar ejecut√°ndose en http://localhost:3000');
console.log('   ‚ÑπÔ∏è Verificar manualmente que la p√°gina carga correctamente');

console.log('\n‚úÖ TESTING EXHAUSTIVO COMPLETADO');
console.log('='.repeat(60));
