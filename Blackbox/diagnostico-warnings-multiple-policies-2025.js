// =====================================================
// DIAGN√ìSTICO COMPLETO: MULTIPLE PERMISSIVE POLICIES Y DUPLICATE INDEX
// =====================================================
// Fecha: 2025-01-27
// Objetivo: Analizar y diagnosticar warnings de rendimiento en Supabase
// Protocolo: Seguir flujo de trabajo eficiente sin romper el proyecto
// =====================================================

const { createClient } = require('@supabase/supabase-js');

// Configuraci√≥n de Supabase
const SUPABASE_URL = 'https://qfeyhaaxyemmnohqdele.supabase.co';
const SUPABASE_SERVICE_ROLE_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InFmZXloYWF4eWVtbW5vaHFkZWxlIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NTgxNjczOCwiZXhwIjoyMDcxMzkyNzM4fQ.5wJb1p0Rmg1dVIayIT4wZO_seDXTIwhVa36CyEgK-yM';

const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY);

async function diagnosticarWarningsCompleto() {
    console.log('üîç INICIANDO DIAGN√ìSTICO COMPLETO DE WARNINGS SUPABASE');
    console.log('=' .repeat(60));
    console.log(`‚è∞ Timestamp: ${new Date().toISOString()}`);
    console.log(`üîó Supabase URL: ${SUPABASE_URL}`);
    console.log('=' .repeat(60));
    console.log('');

    const resultados = {
        timestamp: new Date().toISOString(),
        warnings: {
            multiplePermissivePolicies: [],
            duplicateIndex: []
        },
        analisis: {
            tablas: {},
            politicas: {},
            indices: {}
        },
        recomendaciones: [],
        impactoRendimiento: 'PENDIENTE'
    };

    try {
        // ====================================================================
        console.log('üîç PASO 1: AN√ÅLISIS DE POL√çTICAS M√öLTIPLES');
        console.log('='.repeat(40));

        // Obtener todas las pol√≠ticas RLS
        const { data: politicas, error: politicasError } = await supabase
            .rpc('sql', {
                query: `
                    SELECT 
                        schemaname,
                        tablename,
                        policyname,
                        cmd,
                        roles,
                        qual,
                        with_check
                    FROM pg_policies 
                    WHERE schemaname = 'public'
                    ORDER BY tablename, cmd, roles;
                `
            });

        if (politicasError) {
            console.log('‚ùå Error obteniendo pol√≠ticas:', politicasError.message);
        } else {
            console.log(`üìã POL√çTICAS ENCONTRADAS: ${politicas.length}`);
            
            // Agrupar pol√≠ticas por tabla, rol y acci√≥n
            const politicasAgrupadas = {};
            
            politicas.forEach(politica => {
                const tabla = politica.tablename;
                const accion = politica.cmd;
                const roles = politica.roles || ['public'];
                
                if (!politicasAgrupadas[tabla]) {
                    politicasAgrupadas[tabla] = {};
                }
                
                roles.forEach(rol => {
                    const clave = `${tabla}_${rol}_${accion}`;
                    
                    if (!politicasAgrupadas[tabla][clave]) {
                        politicasAgrupadas[tabla][clave] = [];
                    }
                    
                    politicasAgrupadas[tabla][clave].push({
                        nombre: politica.policyname,
                        condicion: politica.qual,
                        withCheck: politica.with_check
                    });
                });
            });

            // Identificar pol√≠ticas m√∫ltiples
            Object.keys(politicasAgrupadas).forEach(tabla => {
                Object.keys(politicasAgrupadas[tabla]).forEach(clave => {
                    const politicasGrupo = politicasAgrupadas[tabla][clave];
                    
                    if (politicasGrupo.length > 1) {
                        const [tablaName, rol, accion] = clave.split('_');
                        
                        console.log(`‚ö†Ô∏è M√öLTIPLES POL√çTICAS DETECTADAS:`);
                        console.log(`   üìã Tabla: ${tablaName}`);
                        console.log(`   üë§ Rol: ${rol}`);
                        console.log(`   üîß Acci√≥n: ${accion}`);
                        console.log(`   üìä Cantidad: ${politicasGrupo.length}`);
                        
                        politicasGrupo.forEach((pol, index) => {
                            console.log(`      ${index + 1}. ${pol.nombre}`);
                            console.log(`         Condici√≥n: ${pol.condicion || 'N/A'}`);
                        });
                        console.log('');

                        resultados.warnings.multiplePermissivePolicies.push({
                            tabla: tablaName,
                            rol: rol,
                            accion: accion,
                            cantidad: politicasGrupo.length,
                            politicas: politicasGrupo.map(p => p.nombre),
                            impacto: 'PERFORMANCE'
                        });
                    }
                });
            });

            resultados.analisis.politicas = politicasAgrupadas;
        }

        // ====================================================================
        console.log('üîç PASO 2: AN√ÅLISIS DE √çNDICES DUPLICADOS');
        console.log('='.repeat(40));

        // Obtener informaci√≥n de √≠ndices
        const { data: indices, error: indicesError } = await supabase
            .rpc('sql', {
                query: `
                    SELECT 
                        schemaname,
                        tablename,
                        indexname,
                        indexdef
                    FROM pg_indexes 
                    WHERE schemaname = 'public'
                    ORDER BY tablename, indexname;
                `
            });

        if (indicesError) {
            console.log('‚ùå Error obteniendo √≠ndices:', indicesError.message);
        } else {
            console.log(`üìã √çNDICES ENCONTRADOS: ${indices.length}`);
            
            // Agrupar √≠ndices por tabla y definici√≥n
            const indicesAgrupados = {};
            
            indices.forEach(indice => {
                const tabla = indice.tablename;
                const definicion = indice.indexdef;
                
                if (!indicesAgrupados[tabla]) {
                    indicesAgrupados[tabla] = {};
                }
                
                if (!indicesAgrupados[tabla][definicion]) {
                    indicesAgrupados[tabla][definicion] = [];
                }
                
                indicesAgrupados[tabla][definicion].push(indice.indexname);
            });

            // Identificar √≠ndices duplicados
            Object.keys(indicesAgrupados).forEach(tabla => {
                Object.keys(indicesAgrupados[tabla]).forEach(definicion => {
                    const indicesGrupo = indicesAgrupados[tabla][definicion];
                    
                    if (indicesGrupo.length > 1) {
                        console.log(`‚ö†Ô∏è √çNDICES DUPLICADOS DETECTADOS:`);
                        console.log(`   üìã Tabla: ${tabla}`);
                        console.log(`   üìä Cantidad: ${indicesGrupo.length}`);
                        console.log(`   üìù Definici√≥n: ${definicion}`);
                        
                        indicesGrupo.forEach((indice, index) => {
                            console.log(`      ${index + 1}. ${indice}`);
                        });
                        console.log('');

                        resultados.warnings.duplicateIndex.push({
                            tabla: tabla,
                            cantidad: indicesGrupo.length,
                            indices: indicesGrupo,
                            definicion: definicion,
                            impacto: 'PERFORMANCE'
                        });
                    }
                });
            });

            resultados.analisis.indices = indicesAgrupados;
        }

        // ====================================================================
        console.log('üîç PASO 3: AN√ÅLISIS DE IMPACTO EN RENDIMIENTO');
        console.log('='.repeat(40));

        const totalWarnings = resultados.warnings.multiplePermissivePolicies.length + 
                             resultados.warnings.duplicateIndex.length;

        console.log(`üìä RESUMEN DE WARNINGS:`);
        console.log(`   üîí Pol√≠ticas m√∫ltiples: ${resultados.warnings.multiplePermissivePolicies.length}`);
        console.log(`   üìá √çndices duplicados: ${resultados.warnings.duplicateIndex.length}`);
        console.log(`   üìà Total warnings: ${totalWarnings}`);

        // Evaluar impacto
        let impactoGeneral = 'BAJO';
        if (totalWarnings > 20) {
            impactoGeneral = 'ALTO';
        } else if (totalWarnings > 10) {
            impactoGeneral = 'MEDIO';
        }

        resultados.impactoRendimiento = impactoGeneral;
        console.log(`   ‚ö° Impacto en rendimiento: ${impactoGeneral}`);

        // ====================================================================
        console.log('üîç PASO 4: GENERACI√ìN DE RECOMENDACIONES');
        console.log('='.repeat(40));

        // Recomendaciones para pol√≠ticas m√∫ltiples
        if (resultados.warnings.multiplePermissivePolicies.length > 0) {
            console.log('üí° RECOMENDACIONES PARA POL√çTICAS M√öLTIPLES:');
            
            resultados.warnings.multiplePermissivePolicies.forEach(warning => {
                const recomendacion = `Consolidar pol√≠ticas en tabla ${warning.tabla} para rol ${warning.rol} y acci√≥n ${warning.accion}`;
                console.log(`   ‚úÖ ${recomendacion}`);
                resultados.recomendaciones.push({
                    tipo: 'MULTIPLE_POLICIES',
                    tabla: warning.tabla,
                    accion: recomendacion,
                    prioridad: 'MEDIA'
                });
            });
        }

        // Recomendaciones para √≠ndices duplicados
        if (resultados.warnings.duplicateIndex.length > 0) {
            console.log('üí° RECOMENDACIONES PARA √çNDICES DUPLICADOS:');
            
            resultados.warnings.duplicateIndex.forEach(warning => {
                const recomendacion = `Eliminar √≠ndices duplicados en tabla ${warning.tabla}, mantener solo uno`;
                console.log(`   ‚úÖ ${recomendacion}`);
                resultados.recomendaciones.push({
                    tipo: 'DUPLICATE_INDEX',
                    tabla: warning.tabla,
                    accion: recomendacion,
                    prioridad: 'ALTA'
                });
            });
        }

        // ====================================================================
        console.log('');
        console.log('üìä RESUMEN FINAL DEL DIAGN√ìSTICO');
        console.log('='.repeat(40));
        console.log(`‚úÖ Warnings de pol√≠ticas m√∫ltiples: ${resultados.warnings.multiplePermissivePolicies.length}`);
        console.log(`‚úÖ Warnings de √≠ndices duplicados: ${resultados.warnings.duplicateIndex.length}`);
        console.log(`‚úÖ Recomendaciones generadas: ${resultados.recomendaciones.length}`);
        console.log(`‚úÖ Impacto en rendimiento: ${resultados.impactoRendimiento}`);
        console.log('');

        // Guardar resultados
        const fs = require('fs');
        const reportePath = 'Blackbox/DIAGNOSTICO-WARNINGS-MULTIPLE-POLICIES-2025.json';
        fs.writeFileSync(reportePath, JSON.stringify(resultados, null, 2));
        console.log(`üìÑ Reporte guardado en: ${reportePath}`);

        console.log('‚úÖ DIAGN√ìSTICO COMPLETADO EXITOSAMENTE');
        return resultados;

    } catch (error) {
        console.log('‚ùå ERROR DURANTE EL DIAGN√ìSTICO:', error.message);
        return null;
    }
}

// Ejecutar diagn√≥stico
if (require.main === module) {
    diagnosticarWarningsCompleto().catch(console.error);
}

module.exports = { diagnosticarWarningsCompleto };
