@echo off
echo =====================================================
echo üß™ EJECUTANDO TESTING EXHAUSTIVO POST-DIAGNOSTICO COMPLETO
echo =====================================================
echo.
echo Este script ejecutar√° un testing exhaustivo completo despu√©s
echo de aplicar la soluci√≥n definitiva para el error de la tabla profiles
echo.
echo Fases del testing:
echo 1. Verificaci√≥n de estructura de base de datos
echo 2. Testing de registro de usuarios (todos los tipos)
echo 3. Testing de casos edge
echo 4. Testing de integraci√≥n con APIs
echo 5. Testing de configuraci√≥n SMTP
echo 6. Testing de flujos completos
echo.
echo ‚ö†Ô∏è  IMPORTANTE: Aseg√∫rate de que:
echo    - Las variables de entorno de Supabase est√©n configuradas
echo    - El servidor de desarrollo est√© ejecut√°ndose
echo    - La soluci√≥n SQL haya sido aplicada previamente
echo.
pause

echo.
echo üìã Verificando dependencias...
where node >nul 2>nul
if %errorlevel% neq 0 (
    echo ‚ùå ERROR: Node.js no est√° instalado
    pause
    exit /b 1
)

echo ‚úÖ Node.js encontrado
echo.

echo üîß Instalando dependencias necesarias...
cd /d "%~dp0"

REM Verificar si estamos en el directorio correcto
if not exist "Backend" (
    echo ‚ùå ERROR: Directorio Backend no encontrado
    echo    Aseg√∫rate de ejecutar este script desde el directorio ra√≠z del proyecto
    pause
    exit /b 1
)

cd Backend

REM Instalar dependencias si no existen
if not exist "node_modules" (
    echo üì¶ Instalando dependencias del proyecto...
    npm install
    if %errorlevel% neq 0 (
        echo ‚ùå ERROR: Fall√≥ la instalaci√≥n de dependencias
        pause
        exit /b 1
    )
)

REM Verificar dependencias espec√≠ficas para testing
echo üì¶ Verificando dependencias de testing...
npm list @supabase/supabase-js >nul 2>nul
if %errorlevel% neq 0 (
    echo üì¶ Instalando @supabase/supabase-js...
    npm install @supabase/supabase-js
)

npm list nodemailer >nul 2>nul
if %errorlevel% neq 0 (
    echo üì¶ Instalando nodemailer...
    npm install nodemailer
)

echo ‚úÖ Dependencias verificadas
echo.

echo üöÄ Ejecutando testing exhaustivo...
cd ..
node testing-exhaustivo-post-diagnostico-completo.js

if %errorlevel% equ 0 (
    echo.
    echo ‚úÖ TESTING COMPLETADO EXITOSAMENTE
    echo.
    echo üìä Revisa los resultados arriba para ver:
    echo    - Tasa de √©xito general
    echo    - Detalles de cada fase de testing
    echo    - Problemas detectados (si los hay)
    echo.
    echo üìù Se recomienda:
    echo    1. Revisar cualquier test fallido
    echo    2. Corregir problemas identificados
    echo    3. Re-ejecutar el testing si es necesario
    echo.
) else (
    echo.
    echo ‚ùå TESTING COMPLETADO CON ERRORES
    echo.
    echo üîç Revisa los errores arriba y:
    echo    1. Verifica la configuraci√≥n de Supabase
    echo    2. Aseg√∫rate de que el servidor est√© ejecut√°ndose
    echo    3. Confirma que la soluci√≥n SQL fue aplicada
    echo    4. Revisa las variables de entorno
    echo.
)

echo.
echo üìã PR√ìXIMOS PASOS RECOMENDADOS:
echo.
if %errorlevel% equ 0 (
    echo ‚úÖ Si el testing fue exitoso:
    echo    1. El sistema est√° listo para uso
    echo    2. Puedes proceder con testing manual adicional
    echo    3. Considera implementar mejoras identificadas
    echo.
) else (
    echo ‚ö†Ô∏è  Si hubo errores:
    echo    1. Revisa los logs de error detallados arriba
    echo    2. Corrige los problemas identificados
    echo    3. Re-ejecuta este script
    echo    4. Contacta soporte si persisten los problemas
    echo.
)

echo üîó RECURSOS ADICIONALES:
echo    - SOLUCION-DEFINITIVA-ERROR-PROFILES-TABLE-COMPLETA.sql
echo    - Backend/GUIA-CONFIGURACION-SUPABASE-COMPLETA-DEFINITIVA.md
echo    - VARIABLES-ENTORNO-VERCEL-COMPLETAS-DEFINITIVAS.md
echo.

pause
