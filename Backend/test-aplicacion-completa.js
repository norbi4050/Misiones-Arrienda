const https = require('https');
const http = require('http');

console.log('üß™ TESTING COMPLETO DE LA APLICACI√ìN MISIONES ARRIENDA');
console.log('=' .repeat(60));
console.log('Fecha:', new Date().toISOString());
console.log('');

// Funci√≥n para hacer peticiones HTTP
function makeRequest(url, method = 'GET') {
    return new Promise((resolve, reject) => {
        const urlObj = new URL(url);
        const options = {
            hostname: urlObj.hostname,
            port: urlObj.port || (urlObj.protocol === 'https:' ? 443 : 80),
            path: urlObj.pathname + urlObj.search,
            method: method,
            timeout: 10000,
            headers: {
                'User-Agent': 'Testing-Script/1.0'
            }
        };

        const client = urlObj.protocol === 'https:' ? https : http;
        
        const req = client.request(options, (res) => {
            let data = '';
            res.on('data', (chunk) => data += chunk);
            res.on('end', () => {
                resolve({
                    statusCode: res.statusCode,
                    headers: res.headers,
                    data: data,
                    success: res.statusCode >= 200 && res.statusCode < 400
                });
            });
        });

        req.on('error', (err) => reject(err));
        req.on('timeout', () => {
            req.destroy();
            reject(new Error('Request timeout'));
        });
        
        req.end();
    });
}

// Tests a ejecutar
const tests = [
    {
        name: 'P√°gina Principal',
        url: 'http://localhost:3000',
        description: 'Verificar que la p√°gina principal carga correctamente'
    },
    {
        name: 'API Health Check',
        url: 'http://localhost:3000/api/health/db',
        description: 'Verificar endpoint de salud de la base de datos'
    },
    {
        name: 'API Version',
        url: 'http://localhost:3000/api/version',
        description: 'Verificar endpoint de versi√≥n'
    },
    {
        name: 'API Properties',
        url: 'http://localhost:3000/api/properties',
        description: 'Verificar endpoint de propiedades'
    },
    {
        name: 'API Stats',
        url: 'http://localhost:3000/api/stats',
        description: 'Verificar endpoint de estad√≠sticas'
    },
    {
        name: 'P√°gina de Login',
        url: 'http://localhost:3000/login',
        description: 'Verificar p√°gina de login'
    },
    {
        name: 'P√°gina de Registro',
        url: 'http://localhost:3000/register',
        description: 'Verificar p√°gina de registro'
    },
    {
        name: 'P√°gina de Propiedades',
        url: 'http://localhost:3000/properties',
        description: 'Verificar p√°gina de listado de propiedades'
    },
    {
        name: 'P√°gina de Comunidad',
        url: 'http://localhost:3000/comunidad',
        description: 'Verificar p√°gina de comunidad'
    },
    {
        name: 'Dashboard',
        url: 'http://localhost:3000/dashboard',
        description: 'Verificar dashboard de usuario'
    }
];

// Ejecutar tests
async function runTests() {
    console.log('üöÄ INICIANDO TESTS...\n');
    
    let passed = 0;
    let failed = 0;
    const results = [];

    for (const test of tests) {
        try {
            console.log(`üîç Testing: ${test.name}`);
            console.log(`   URL: ${test.url}`);
            console.log(`   Descripci√≥n: ${test.description}`);
            
            const result = await makeRequest(test.url);
            
            if (result.success) {
                console.log(`   ‚úÖ √âXITO - Status: ${result.statusCode}`);
                passed++;
                results.push({
                    test: test.name,
                    status: 'PASSED',
                    statusCode: result.statusCode,
                    url: test.url
                });
            } else {
                console.log(`   ‚ö†Ô∏è  ADVERTENCIA - Status: ${result.statusCode}`);
                if (result.statusCode === 401 || result.statusCode === 403) {
                    console.log(`   ‚ÑπÔ∏è  Nota: Error de autenticaci√≥n esperado para esta ruta`);
                    passed++;
                    results.push({
                        test: test.name,
                        status: 'PASSED (Auth Required)',
                        statusCode: result.statusCode,
                        url: test.url
                    });
                } else {
                    failed++;
                    results.push({
                        test: test.name,
                        status: 'FAILED',
                        statusCode: result.statusCode,
                        url: test.url
                    });
                }
            }
            
        } catch (error) {
            console.log(`   ‚ùå ERROR - ${error.message}`);
            failed++;
            results.push({
                test: test.name,
                status: 'ERROR',
                error: error.message,
                url: test.url
            });
        }
        
        console.log('');
    }

    // Resumen final
    console.log('üìä RESUMEN DE TESTING');
    console.log('=' .repeat(40));
    console.log(`‚úÖ Tests exitosos: ${passed}`);
    console.log(`‚ùå Tests fallidos: ${failed}`);
    console.log(`üìà Porcentaje de √©xito: ${Math.round((passed / tests.length) * 100)}%`);
    console.log('');

    // Detalles de resultados
    console.log('üìã DETALLES DE RESULTADOS:');
    console.log('-' .repeat(40));
    results.forEach(result => {
        const emoji = result.status.includes('PASSED') ? '‚úÖ' : 
                     result.status === 'ERROR' ? '‚ùå' : '‚ö†Ô∏è';
        console.log(`${emoji} ${result.test}: ${result.status}`);
        if (result.statusCode) {
            console.log(`   Status Code: ${result.statusCode}`);
        }
        if (result.error) {
            console.log(`   Error: ${result.error}`);
        }
    });

    console.log('');
    console.log('üéØ CONCLUSI√ìN:');
    if (failed === 0) {
        console.log('üéâ ¬°TODOS LOS TESTS PASARON! La aplicaci√≥n est√° funcionando correctamente.');
    } else if (passed > failed) {
        console.log('‚úÖ La mayor√≠a de tests pasaron. Hay algunos problemas menores a revisar.');
    } else {
        console.log('‚ö†Ô∏è Hay varios problemas que necesitan atenci√≥n.');
    }
    
    console.log('');
    console.log('‚úÖ TESTING COMPLETO FINALIZADO');
}

// Ejecutar los tests
runTests().catch(console.error);
