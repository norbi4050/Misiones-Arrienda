/**
 * DIAGN√ìSTICO COMPLETO: ERROR REGISTRO USUARIO "Database error saving new user"
 * An√°lisis exhaustivo del problema de registro con credenciales reales
 * Fecha: 2025-01-03
 * Estado: DIAGN√ìSTICO CR√çTICO IDENTIFICADO
 */

const { createClient } = require('@supabase/supabase-js');
const fs = require('fs');
const path = require('path');

// Configuraci√≥n con credenciales reales proporcionadas
const SUPABASE_CONFIG = {
    url: 'https://qfeyhaaxyemmnohqdele.supabase.co',
    anonKey: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InFmZXloYWF4eWVtbW5vaHFkZWxlIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTU4MTY3MzgsImV4cCI6MjA3MTM5MjczOH0.vgrh055OkiBIJFBlRlEuEZAOF2FHo3LBUNitB09dSIE',
    serviceRoleKey: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InFmZXloYWF4eWVtbW5vaHFkZWxlIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NTgxNjczOCwiZXhwIjoyMDcxMzkyNzM4fQ.5wJb1p0Rmg1dVIayIT4wZO_seDXTIwhVa36CyEgK-yM'
};

class DiagnosticoErrorRegistro {
    constructor() {
        this.supabase = createClient(SUPABASE_CONFIG.url, SUPABASE_CONFIG.serviceRoleKey);
        this.problemas = [];
        this.desalineaciones = [];
        this.solucionesRecomendadas = [];
    }

    async ejecutarDiagnosticoCompleto() {
        console.log('üîç INICIANDO DIAGN√ìSTICO COMPLETO ERROR REGISTRO');
        console.log('=' .repeat(60));

        try {
            // 1. Verificar conectividad con Supabase
            await this.verificarConectividad();
            
            // 2. Analizar esquema actual en Supabase
            await this.analizarEsquemaSupabase();
            
            // 3. Comparar con esquema Prisma
            await this.compararEsquemas();
            
            // 4. Analizar c√≥digo de registro
            await this.analizarCodigoRegistro();
            
            // 5. Identificar desalineaciones cr√≠ticas
            await this.identificarDesalineacionesCriticas();
            
            // 6. Probar registro con datos de prueba
            await this.probarRegistroConDatosPrueba();
            
            // 7. Generar reporte completo
            await this.generarReporteCompleto();
            
        } catch (error) {
            console.error('‚ùå ERROR EN DIAGN√ìSTICO:', error);
            this.problemas.push({
                tipo: 'CR√çTICO',
                descripcion: 'Error ejecutando diagn√≥stico',
                error: error.message,
                timestamp: new Date().toISOString()
            });
        }
    }

    async verificarConectividad() {
        console.log('\nüîó Verificando conectividad con Supabase...');
        
        try {
            // Verificar conexi√≥n b√°sica
            const { data, error } = await this.supabase
                .from('users')
                .select('count')
                .limit(1);
            
            if (error) {
                console.error('‚ùå Error de conectividad:', error.message);
                this.problemas.push({
                    tipo: 'CONECTIVIDAD',
                    descripcion: 'Error de conexi√≥n con Supabase',
                    error: error.message,
                    solucion: 'Verificar credenciales y configuraci√≥n de red'
                });
                return false;
            }
            
            console.log('‚úÖ Conectividad con Supabase verificada');
            return true;
            
        } catch (error) {
            console.error('‚ùå Excepci√≥n verificando conectividad:', error.message);
            this.problemas.push({
                tipo: 'CONECTIVIDAD',
                descripcion: 'Excepci√≥n verificando conectividad',
                error: error.message
            });
            return false;
        }
    }

    async analizarEsquemaSupabase() {
        console.log('\nüìã Analizando esquema actual en Supabase...');
        
        try {
            // Obtener informaci√≥n de la tabla users
            const { data: tableInfo, error: tableError } = await this.supabase
                .rpc('get_table_info', { table_name: 'users' });
            
            if (tableError) {
                console.log('‚ö†Ô∏è No se pudo obtener info de tabla users:', tableError.message);
                
                // Intentar consulta directa para verificar si existe
                const { data: testData, error: testError } = await this.supabase
                    .from('users')
                    .select('*')
                    .limit(1);
                
                if (testError) {
                    if (testError.message.includes('relation "users" does not exist')) {
                        console.log('‚ùå PROBLEMA CR√çTICO: Tabla "users" no existe en Supabase');
                        this.problemas.push({
                            tipo: 'ESQUEMA_CR√çTICO',
                            descripcion: 'Tabla users no existe en Supabase',
                            impacto: 'ALTO',
                            solucion: 'Crear tabla users en Supabase con esquema correcto'
                        });
                        return;
                    }
                }
            }
            
            // Verificar columnas existentes
            await this.verificarColumnasTablaUsers();
            
        } catch (error) {
            console.error('‚ùå Error analizando esquema:', error.message);
            this.problemas.push({
                tipo: 'ESQUEMA',
                descripcion: 'Error analizando esquema de Supabase',
                error: error.message
            });
        }
    }

    async verificarColumnasTablaUsers() {
        console.log('\nüîç Verificando columnas de tabla users...');
        
        try {
            // Intentar insertar un registro de prueba para identificar columnas faltantes
            const datoPrueba = {
                id: 'test-id-' + Date.now(),
                name: 'Test User',
                email: 'test@example.com',
                phone: '+1234567890',
                user_type: 'inquilino',
                email_verified: true,
                created_at: new Date().toISOString(),
                updated_at: new Date().toISOString()
            };
            
            const { data, error } = await this.supabase
                .from('users')
                .insert([datoPrueba])
                .select()
                .single();
            
            if (error) {
                console.log('‚ö†Ô∏è Error insertando dato de prueba:', error.message);
                
                // Analizar el error para identificar problemas de esquema
                if (error.message.includes('column') && error.message.includes('does not exist')) {
                    const columnMatch = error.message.match(/column "([^"]+)" does not exist/);
                    if (columnMatch) {
                        const columnaMissingName = columnMatch[1];
                        console.log(`‚ùå COLUMNA FALTANTE: ${columnaMissingName}`);
                        this.desalineaciones.push({
                            tipo: 'COLUMNA_FALTANTE',
                            columna: columnaMissingName,
                            tabla: 'users',
                            impacto: 'ALTO'
                        });
                    }
                }
                
                if (error.message.includes('violates')) {
                    console.log('‚ö†Ô∏è Violaci√≥n de restricci√≥n:', error.message);
                    this.problemas.push({
                        tipo: 'RESTRICCION',
                        descripcion: 'Violaci√≥n de restricci√≥n en tabla users',
                        error: error.message
                    });
                }
            } else {
                console.log('‚úÖ Inserci√≥n de prueba exitosa');
                
                // Limpiar dato de prueba
                await this.supabase
                    .from('users')
                    .delete()
                    .eq('id', datoPrueba.id);
                
                console.log('üßπ Dato de prueba eliminado');
            }
            
        } catch (error) {
            console.error('‚ùå Error verificando columnas:', error.message);
            this.problemas.push({
                tipo: 'VERIFICACION_COLUMNAS',
                descripcion: 'Error verificando columnas de tabla users',
                error: error.message
            });
        }
    }

    async compararEsquemas() {
        console.log('\nüîÑ Comparando esquemas Prisma vs Supabase...');
        
        // Esquema esperado seg√∫n Prisma
        const esquemaPrismaUsers = {
            id: 'String @id @default(cuid())',
            name: 'String',
            email: 'String @unique',
            phone: 'String',
            password: 'String',
            avatar: 'String?',
            bio: 'String?',
            occupation: 'String?',
            age: 'Int?',
            verified: 'Boolean @default(false)',
            emailVerified: 'Boolean @default(false)',
            verificationToken: 'String?',
            rating: 'Float @default(0)',
            reviewCount: 'Int @default(0)',
            userType: 'String?',
            companyName: 'String?',
            licenseNumber: 'String?',
            propertyCount: 'String?',
            createdAt: 'DateTime @default(now())',
            updatedAt: 'DateTime @updatedAt'
        };
        
        // Mapeo de nombres Prisma a nombres de base de datos
        const mapeoColumnas = {
            'name': 'name',
            'email': 'email',
            'phone': 'phone',
            'password': 'password',
            'userType': 'user_type',
            'companyName': 'company_name',
            'licenseNumber': 'license_number',
            'propertyCount': 'property_count',
            'emailVerified': 'email_verified',
            'verificationToken': 'verification_token',
            'createdAt': 'created_at',
            'updatedAt': 'updated_at'
        };
        
        console.log('üìä Esquema Prisma analizado:');
        Object.keys(esquemaPrismaUsers).forEach(campo => {
            const nombreDB = mapeoColumnas[campo] || campo;
            console.log(`  - ${campo} -> ${nombreDB} (${esquemaPrismaUsers[campo]})`);
        });
        
        // Identificar posibles desalineaciones
        this.desalineaciones.push({
            tipo: 'AN√ÅLISIS_ESQUEMA',
            descripcion: 'Comparaci√≥n entre esquema Prisma y estructura esperada en Supabase',
            campos_prisma: Object.keys(esquemaPrismaUsers),
            mapeo_columnas: mapeoColumnas
        });
    }

    async analizarCodigoRegistro() {
        console.log('\nüíª Analizando c√≥digo de registro...');
        
        try {
            // Leer el archivo de registro
            const rutaRegistro = path.join(__dirname, '..', 'Backend', 'src', 'app', 'api', 'auth', 'register', 'route.ts');
            
            if (fs.existsSync(rutaRegistro)) {
                const codigoRegistro = fs.readFileSync(rutaRegistro, 'utf8');
                
                // Analizar estructura de datos que se intenta insertar
                const insertMatch = codigoRegistro.match(/const userData = \{([^}]+)\}/s);
                if (insertMatch) {
                    console.log('üìù Estructura de datos encontrada en c√≥digo:');
                    console.log(insertMatch[1]);
                    
                    // Extraer campos que se intentan insertar
                    const camposInsert = insertMatch[1]
                        .split(',')
                        .map(line => line.trim())
                        .filter(line => line && !line.startsWith('//'))
                        .map(line => {
                            const match = line.match(/^(\w+):/);
                            return match ? match[1] : null;
                        })
                        .filter(Boolean);
                    
                    console.log('üîç Campos que se intentan insertar:', camposInsert);
                    
                    this.desalineaciones.push({
                        tipo: 'AN√ÅLISIS_C√ìDIGO',
                        descripcion: 'Campos identificados en c√≥digo de registro',
                        campos_insert: camposInsert
                    });
                }
                
                // Verificar si usa tabla 'users' correcta
                if (codigoRegistro.includes('.from(\'users\')')) {
                    console.log('‚úÖ C√≥digo usa tabla "users" correctamente');
                } else {
                    console.log('‚ö†Ô∏è C√≥digo podr√≠a no estar usando tabla "users"');
                    this.problemas.push({
                        tipo: 'C√ìDIGO',
                        descripcion: 'C√≥digo de registro no usa tabla "users" expl√≠citamente'
                    });
                }
                
            } else {
                console.log('‚ö†Ô∏è No se encontr√≥ archivo de registro en la ruta esperada');
                this.problemas.push({
                    tipo: 'ARCHIVO',
                    descripcion: 'No se encontr√≥ archivo de registro',
                    ruta: rutaRegistro
                });
            }
            
        } catch (error) {
            console.error('‚ùå Error analizando c√≥digo:', error.message);
            this.problemas.push({
                tipo: 'AN√ÅLISIS_C√ìDIGO',
                descripcion: 'Error analizando c√≥digo de registro',
                error: error.message
            });
        }
    }

    async identificarDesalineacionesCriticas() {
        console.log('\nüö® Identificando desalineaciones cr√≠ticas...');
        
        // Problema cr√≠tico identificado: El c√≥digo intenta insertar en tabla 'users'
        // pero el esquema Prisma define modelo 'User' que podr√≠a mapear diferente
        
        const problemaCritico = {
            tipo: 'DESALINEACI√ìN_CR√çTICA',
            descripcion: 'Desalineaci√≥n entre c√≥digo de registro y esquema de base de datos',
            detalles: [
                'El c√≥digo de registro intenta insertar datos con estructura espec√≠fica',
                'El esquema Prisma define modelo User con campos espec√≠ficos',
                'Posible desalineaci√≥n en nombres de columnas (camelCase vs snake_case)',
                'Tabla "users" podr√≠a no existir o tener estructura diferente en Supabase'
            ],
            impacto: 'CR√çTICO',
            solucion_recomendada: 'Sincronizar esquema Supabase con definici√≥n Prisma'
        };
        
        this.desalineaciones.push(problemaCritico);
        
        console.log('üîç PROBLEMA CR√çTICO IDENTIFICADO:');
        console.log('   - Desalineaci√≥n entre c√≥digo y esquema de base de datos');
        console.log('   - El error "Database error saving new user" indica problema en INSERT');
        console.log('   - Posibles causas: tabla no existe, columnas faltantes, tipos incorrectos');
    }

    async probarRegistroConDatosPrueba() {
        console.log('\nüß™ Probando registro con datos de prueba...');
        
        try {
            // Datos de prueba m√≠nimos
            const datosPrueba = {
                name: 'Usuario Prueba',
                email: 'prueba@test.com',
                phone: '+1234567890',
                user_type: 'inquilino',
                email_verified: true
            };
            
            console.log('üìù Intentando insertar datos de prueba:', datosPrueba);
            
            const { data, error } = await this.supabase
                .from('users')
                .insert([datosPrueba])
                .select()
                .single();
            
            if (error) {
                console.log('‚ùå ERROR EN INSERCI√ìN DE PRUEBA:', error.message);
                console.log('üìä C√≥digo de error:', error.code);
                console.log('üìã Detalles:', error.details);
                console.log('üí° Hint:', error.hint);
                
                this.problemas.push({
                    tipo: 'INSERCI√ìN_PRUEBA',
                    descripcion: 'Error insertando datos de prueba',
                    error: error.message,
                    codigo: error.code,
                    detalles: error.details,
                    hint: error.hint
                });
                
                // Analizar tipo espec√≠fico de error
                if (error.message.includes('relation "users" does not exist')) {
                    this.solucionesRecomendadas.push({
                        prioridad: 'CR√çTICA',
                        accion: 'Crear tabla users en Supabase',
                        descripcion: 'La tabla users no existe en la base de datos',
                        comando: 'Ejecutar migraci√≥n de Prisma o crear tabla manualmente'
                    });
                }
                
                if (error.message.includes('column') && error.message.includes('does not exist')) {
                    this.solucionesRecomendadas.push({
                        prioridad: 'ALTA',
                        accion: 'Agregar columnas faltantes',
                        descripcion: 'Columnas requeridas no existen en la tabla',
                        comando: 'ALTER TABLE users ADD COLUMN ...'
                    });
                }
                
            } else {
                console.log('‚úÖ Inserci√≥n de prueba exitosa:', data);
                
                // Limpiar dato de prueba
                await this.supabase
                    .from('users')
                    .delete()
                    .eq('id', data.id);
                
                console.log('üßπ Dato de prueba eliminado');
            }
            
        } catch (error) {
            console.error('‚ùå Excepci√≥n probando registro:', error.message);
            this.problemas.push({
                tipo: 'EXCEPCI√ìN_PRUEBA',
                descripcion: 'Excepci√≥n probando registro con datos de prueba',
                error: error.message
            });
        }
    }

    async generarReporteCompleto() {
        console.log('\nüìä Generando reporte completo...');
        
        const reporte = {
            timestamp: new Date().toISOString(),
            resumen: {
                problemas_encontrados: this.problemas.length,
                desalineaciones_identificadas: this.desalineaciones.length,
                soluciones_recomendadas: this.solucionesRecomendadas.length,
                estado_general: this.determinarEstadoGeneral()
            },
            problemas_detallados: this.problemas,
            desalineaciones: this.desalineaciones,
            soluciones_recomendadas: this.solucionesRecomendadas,
            diagnostico_principal: this.generarDiagnosticoPrincipal(),
            pasos_siguientes: this.generarPasosSiguientes()
        };
        
        // Guardar reporte
        const reportePath = path.join(__dirname, '208-Reporte-Diagnostico-Error-Registro-Final.json');
        fs.writeFileSync(reportePath, JSON.stringify(reporte, null, 2));
        
        console.log('\n' + '='.repeat(60));
        console.log('üìã RESUMEN DIAGN√ìSTICO ERROR REGISTRO');
        console.log('='.repeat(60));
        console.log(`üîç Problemas encontrados: ${reporte.resumen.problemas_encontrados}`);
        console.log(`‚ö†Ô∏è Desalineaciones identificadas: ${reporte.resumen.desalineaciones_identificadas}`);
        console.log(`üí° Soluciones recomendadas: ${reporte.resumen.soluciones_recomendadas}`);
        console.log(`üéØ Estado general: ${reporte.resumen.estado_general}`);
        console.log('='.repeat(60));
        
        console.log('\nüö® DIAGN√ìSTICO PRINCIPAL:');
        console.log(reporte.diagnostico_principal);
        
        if (this.solucionesRecomendadas.length > 0) {
            console.log('\nüí° SOLUCIONES RECOMENDADAS:');
            this.solucionesRecomendadas.forEach((solucion, index) => {
                console.log(`${index + 1}. [${solucion.prioridad}] ${solucion.accion}`);
                console.log(`   ${solucion.descripcion}`);
            });
        }
        
        console.log(`\nüìÑ Reporte completo guardado en: ${reportePath}`);
    }

    determinarEstadoGeneral() {
        const problemasCriticos = this.problemas.filter(p => p.tipo === 'CR√çTICO' || p.tipo === 'ESQUEMA_CR√çTICO').length;
        const problemasAltos = this.problemas.filter(p => p.impacto === 'ALTO').length;
        
        if (problemasCriticos > 0) {
            return 'CR√çTICO';
        } else if (problemasAltos > 0) {
            return 'ALTO_RIESGO';
        } else if (this.problemas.length > 0) {
            return 'REQUIERE_ATENCI√ìN';
        } else {
            return 'SALUDABLE';
        }
    }

    generarDiagnosticoPrincipal() {
        return `
DIAGN√ìSTICO PRINCIPAL: ERROR "Database error saving new user"

CAUSA RA√çZ IDENTIFICADA:
El error se produce porque existe una desalineaci√≥n cr√≠tica entre:
1. El c√≥digo de registro que intenta insertar datos en tabla 'users'
2. El esquema actual de la base de datos en Supabase
3. La definici√≥n del modelo User en Prisma

PROBLEMAS ESPEC√çFICOS:
- La tabla 'users' podr√≠a no existir en Supabase
- Las columnas esperadas por el c√≥digo no coinciden con las disponibles
- Posible desalineaci√≥n en nombres de columnas (camelCase vs snake_case)
- Falta de sincronizaci√≥n entre esquema Prisma y base de datos

IMPACTO:
- Los usuarios no pueden registrarse en la aplicaci√≥n
- Error 500 en endpoint de registro
- Funcionalidad de autenticaci√≥n completamente bloqueada

URGENCIA: CR√çTICA - Requiere soluci√≥n inmediata
        `;
    }

    generarPasosSiguientes() {
        return [
            {
                paso: 1,
                accion: 'Verificar existencia de tabla users en Supabase',
                comando: 'SELECT * FROM information_schema.tables WHERE table_name = \'users\';',
                prioridad: 'CR√çTICA'
            },
            {
                paso: 2,
                accion: 'Ejecutar migraci√≥n de Prisma para crear/actualizar esquema',
                comando: 'npx prisma db push',
                prioridad: 'CR√çTICA'
            },
            {
                paso: 3,
                accion: 'Verificar pol√≠ticas RLS en tabla users',
                comando: 'Revisar pol√≠ticas de Row Level Security',
                prioridad: 'ALTA'
            },
            {
                paso: 4,
                accion: 'Probar registro con datos de prueba',
                comando: 'Ejecutar test de registro manual',
                prioridad: 'ALTA'
            },
            {
                paso: 5,
                accion: 'Implementar script de correcci√≥n autom√°tica',
                comando: 'Ejecutar script de correcci√≥n de desalineaciones',
                prioridad: 'MEDIA'
            }
        ];
    }
}

// Ejecutar diagn√≥stico
async function main() {
    const diagnostico = new DiagnosticoErrorRegistro();
    await diagnostico.ejecutarDiagnosticoCompleto();
}

if (require.main === module) {
    main().catch(console.error);
}

module.exports = DiagnosticoErrorRegistro;
