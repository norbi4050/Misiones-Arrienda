const { createClient } = require('@supabase/supabase-js');

console.log('üîí VERIFICACI√ìN DE POL√çTICAS RLS - TABLA USERS');
console.log('=' .repeat(60));

const SUPABASE_URL = 'https://qfeyhaaxyemmnohqdele.supabase.co';
const SUPABASE_SERVICE_ROLE_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InFmZXloYWF4eWVtbW5vaHFkZWxlIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NTgxNjczOCwiZXhwIjoyMDcxMzkyNzM4fQ.5wJb1p0Rmg1dVIayIT4wZO_seDXTIwhVa36CyEgK-yM';

async function verificarPoliciesUsers() {
    const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY);
    
    console.log('üîó Conectando a Supabase...');
    console.log('');

    const resultado = {
        rlsHabilitado: false,
        politicasEncontradas: [],
        totalPoliticas: 0,
        politicasRequeridas: [
            'Users can view own profile',
            'Users can update own profile', 
            'Users can insert own profile',
            'Users can delete own profile',
            'Public profiles viewable by authenticated users',
            'Admins can view all profiles',
            'Service role full access'
        ],
        politicasFaltantes: [],
        requiereCreacion: false,
        estadoGeneral: 'VERIFICANDO'
    };

    try {
        // 1. VERIFICAR SI RLS EST√Å HABILITADO
        console.log('üîç VERIFICANDO SI RLS EST√Å HABILITADO...');
        console.log('-'.repeat(50));

        const { data: rlsStatus, error: rlsError } = await supabase
            .from('pg_tables')
            .select('schemaname, tablename, rowsecurity')
            .eq('schemaname', 'public')
            .eq('tablename', 'users')
            .single();

        if (rlsError) {
            console.log('   ‚ùå Error verificando RLS:', rlsError.message);
        } else {
            resultado.rlsHabilitado = rlsStatus.rowsecurity;
            if (rlsStatus.rowsecurity) {
                console.log('   ‚úÖ RLS HABILITADO en tabla users');
            } else {
                console.log('   ‚ùå RLS NO HABILITADO en tabla users');
            }
        }

        // 2. VERIFICAR POL√çTICAS EXISTENTES
        console.log('');
        console.log('üìã VERIFICANDO POL√çTICAS EXISTENTES...');
        console.log('-'.repeat(50));

        const { data: politicas, error: politicasError } = await supabase
            .from('pg_policies')
            .select('schemaname, tablename, policyname, permissive, roles, cmd, qual, with_check')
            .eq('schemaname', 'public')
            .eq('tablename', 'users');

        if (politicasError) {
            console.log('   ‚ùå Error obteniendo pol√≠ticas:', politicasError.message);
        } else {
            resultado.totalPoliticas = politicas.length;
            resultado.politicasEncontradas = politicas.map(p => p.policyname);

            console.log(`   üìä Total de pol√≠ticas encontradas: ${politicas.length}`);
            
            if (politicas.length === 0) {
                console.log('   ‚ùå NO HAY POL√çTICAS CONFIGURADAS');
            } else {
                console.log('   üìã Pol√≠ticas existentes:');
                politicas.forEach((politica, index) => {
                    console.log(`      ${index + 1}. ${politica.policyname}`);
                    console.log(`         - Comando: ${politica.cmd}`);
                    console.log(`         - Roles: ${politica.roles}`);
                    console.log('');
                });
            }
        }

        // 3. VERIFICAR POL√çTICAS FALTANTES
        console.log('üîç VERIFICANDO POL√çTICAS FALTANTES...');
        console.log('-'.repeat(50));

        resultado.politicasFaltantes = resultado.politicasRequeridas.filter(
            requerida => !resultado.politicasEncontradas.includes(requerida)
        );

        if (resultado.politicasFaltantes.length === 0) {
            console.log('   ‚úÖ TODAS LAS POL√çTICAS REQUERIDAS EST√ÅN PRESENTES');
        } else {
            console.log(`   ‚ö†Ô∏è FALTAN ${resultado.politicasFaltantes.length} POL√çTICAS:`);
            resultado.politicasFaltantes.forEach((faltante, index) => {
                console.log(`      ${index + 1}. ${faltante}`);
            });
        }

        // 4. DETERMINAR SI SE REQUIERE CREACI√ìN
        if (!resultado.rlsHabilitado || resultado.politicasFaltantes.length > 0) {
            resultado.requiereCreacion = true;
            resultado.estadoGeneral = 'REQUIERE CONFIGURACI√ìN';
        } else {
            resultado.requiereCreacion = false;
            resultado.estadoGeneral = 'COMPLETAMENTE CONFIGURADO';
        }

        // 5. TEST DE ACCESO CON POL√çTICAS
        console.log('');
        console.log('üß™ TEST DE ACCESO CON POL√çTICAS...');
        console.log('-'.repeat(50));

        try {
            const { data: testData, error: testError } = await supabase
                .from('users')
                .select('id, name, email')
                .limit(1);

            if (testError) {
                console.log('   ‚ùå Error en test de acceso:', testError.message);
                if (testError.code === 'PGRST301') {
                    console.log('   üö® PROBLEMA: Pol√≠ticas RLS muy restrictivas o mal configuradas');
                }
            } else {
                console.log('   ‚úÖ Test de acceso exitoso');
                console.log(`   üìä Registros accesibles: ${testData.length}`);
            }
        } catch (error) {
            console.log('   ‚ùå Error en test:', error.message);
        }

        // RESUMEN FINAL
        console.log('');
        console.log('üìä RESUMEN DE VERIFICACI√ìN');
        console.log('='.repeat(60));
        
        console.log(`üîí RLS habilitado: ${resultado.rlsHabilitado ? '‚úÖ' : '‚ùå'}`);
        console.log(`üìã Pol√≠ticas encontradas: ${resultado.totalPoliticas}`);
        console.log(`‚ö†Ô∏è Pol√≠ticas faltantes: ${resultado.politicasFaltantes.length}`);
        console.log(`üéØ Estado general: ${resultado.estadoGeneral}`);

        if (resultado.requiereCreacion) {
            console.log('');
            console.log('üõ†Ô∏è ACCI√ìN REQUERIDA:');
            console.log('   1. Ejecutar el archivo: crear-policies-users-supabase.sql');
            console.log('   2. Ir a Supabase Dashboard > SQL Editor');
            console.log('   3. Copiar y pegar el contenido del archivo SQL');
            console.log('   4. Ejecutar el script');
            console.log('   5. Verificar que las pol√≠ticas se crearon correctamente');
        } else {
            console.log('');
            console.log('‚úÖ NO SE REQUIERE ACCI√ìN - POL√çTICAS COMPLETAMENTE CONFIGURADAS');
        }

        // Guardar resultado
        require('fs').writeFileSync(
            'REPORTE-VERIFICACION-POLICIES-USERS.json',
            JSON.stringify(resultado, null, 2)
        );

        console.log('');
        console.log('üìÑ Reporte guardado en: REPORTE-VERIFICACION-POLICIES-USERS.json');
        console.log('‚úÖ VERIFICACI√ìN COMPLETADA');

        return resultado;

    } catch (error) {
        console.error('‚ùå Error general en verificaci√≥n:', error.message);
        resultado.estadoGeneral = 'ERROR EN VERIFICACI√ìN';
        return resultado;
    }
}

verificarPoliciesUsers().catch(console.error);
