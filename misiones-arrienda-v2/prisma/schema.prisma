// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                String   @id @default(cuid())
  email             String   @unique
  name              String?
  password          String?
  emailVerified     DateTime?
  image             String?
  phone             String?
  userType          UserType @default(INQUILINO)
  isEmailVerified   Boolean  @default(false)
  verificationToken String?
  resetToken        String?
  resetTokenExpiry  DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relaciones
  properties    Property[]
  favorites     Favorite[]
  searchHistory SearchHistory[]
  inquiries     Inquiry[]
  payments      Payment[]
  
  // Perfil específico según tipo de usuario
  inquilinoProfile    InquilinoProfile?
  inmobiliariaProfile InmobiliariaProfile?
  duenoProfile        DuenoProfile?

  @@map("users")
}

model InquilinoProfile {
  id               String  @id @default(cuid())
  userId           String  @unique
  user             User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  ocupacion        String?
  ingresos         Float?
  referencias      String?
  mascotas         Boolean @default(false)
  fumador          Boolean @default(false)
  grupoFamiliar    Int?
  preferenciaZona  String?
  presupuestoMax   Float?
  
  @@map("inquilino_profiles")
}

model InmobiliariaProfile {
  id              String  @id @default(cuid())
  userId          String  @unique
  user            User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  nombreEmpresa   String
  cuit            String  @unique
  matricula       String?
  direccion       String?
  telefono        String?
  sitioWeb        String?
  descripcion     String?
  anosExperiencia Int?
  
  @@map("inmobiliaria_profiles")
}

model DuenoProfile {
  id          String  @id @default(cuid())
  userId      String  @unique
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  dni         String?
  telefono    String?
  direccion   String?
  referencias String?
  
  @@map("dueno_profiles")
}

model Property {
  id            String        @id @default(cuid())
  title         String
  description   String
  price         Float
  currency      String        @default("ARS")
  propertyType  PropertyType
  operationType OperationType
  address       String
  city          String
  province      String        @default("Misiones")
  neighborhood  String?
  zipCode       String?
  latitude      Float?
  longitude     Float?
  
  // Características
  bedrooms      Int?
  bathrooms     Int?
  area          Float?
  coveredArea   Float?
  lotArea       Float?
  garage        Boolean       @default(false)
  pool          Boolean       @default(false)
  garden        Boolean       @default(false)
  balcony       Boolean       @default(false)
  terrace       Boolean       @default(false)
  furnished     Boolean       @default(false)
  petFriendly   Boolean       @default(false)
  
  // Servicios
  electricity   Boolean       @default(true)
  water         Boolean       @default(true)
  gas           Boolean       @default(false)
  internet      Boolean       @default(false)
  cable         Boolean       @default(false)
  security      Boolean       @default(false)
  
  // Imágenes y multimedia
  images        String[]
  virtualTour   String?
  video         String?
  
  // Estado y disponibilidad
  status        PropertyStatus @default(AVAILABLE)
  featured      Boolean        @default(false)
  premium       Boolean        @default(false)
  views         Int            @default(0)
  
  // Fechas
  availableFrom DateTime?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  expiresAt     DateTime?
  
  // Relaciones
  ownerId       String
  owner         User           @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  favorites     Favorite[]
  inquiries     Inquiry[]
  payments      Payment[]
  
  @@map("properties")
}

model Favorite {
  id         String   @id @default(cuid())
  userId     String
  propertyId String
  createdAt  DateTime @default(now())
  
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  property Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  
  @@unique([userId, propertyId])
  @@map("favorites")
}

model SearchHistory {
  id           String   @id @default(cuid())
  userId       String
  searchQuery  String
  filters      Json?
  resultsCount Int      @default(0)
  createdAt    DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("search_history")
}

model Inquiry {
  id         String        @id @default(cuid())
  propertyId String
  userId     String
  message    String
  phone      String?
  email      String?
  status     InquiryStatus @default(PENDING)
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  
  property Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("inquiries")
}

model Payment {
  id               String        @id @default(cuid())
  userId           String
  propertyId       String?
  amount           Float
  currency         String        @default("ARS")
  paymentType      PaymentType
  status           PaymentStatus @default(PENDING)
  mercadopagoId    String?
  mercadopagoData  Json?
  description      String?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  property Property? @relation(fields: [propertyId], references: [id], onDelete: SetNull)
  
  @@map("payments")
}

// Enums
enum UserType {
  INQUILINO
  INMOBILIARIA
  DUENO_DIRECTO
  ADMIN
}

enum PropertyType {
  CASA
  DEPARTAMENTO
  PH
  LOCAL_COMERCIAL
  OFICINA
  TERRENO
  QUINTA
  DUPLEX
  TRIPLEX
  MONOAMBIENTE
}

enum OperationType {
  ALQUILER
  VENTA
  ALQUILER_TEMPORAL
}

enum PropertyStatus {
  AVAILABLE
  RENTED
  SOLD
  RESERVED
  INACTIVE
  EXPIRED
}

enum InquiryStatus {
  PENDING
  CONTACTED
  VIEWED
  CLOSED
}

enum PaymentType {
  PREMIUM_LISTING
  FEATURED_LISTING
  SUBSCRIPTION
  COMMISSION
}

enum PaymentStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
  REFUNDED
}
