/**
 * TESTING EXHAUSTIVO - SOLUCI√ìN ERROR PERFIL USUARIO (ARQUITECTURA CORREGIDA)
 * 
 * Este script verifica que la correcci√≥n del hook useAuth.ts funcione correctamente
 * y que ya no se hagan llamadas directas a Supabase desde el frontend.
 */

const fs = require('fs');
const path = require('path');

console.log('üîç INICIANDO TESTING - SOLUCI√ìN ERROR PERFIL USUARIO ARQUITECTURA');
console.log('=' .repeat(80));

// Funci√≥n para verificar el contenido del archivo
function verificarArchivoCorregido() {
    console.log('\nüìÅ VERIFICANDO ARCHIVO CORREGIDO...');
    
    const rutaArchivo = path.join(__dirname, 'Backend/src/hooks/useAuth.ts');
    
    if (!fs.existsSync(rutaArchivo)) {
        console.log('‚ùå ERROR: Archivo useAuth.ts no encontrado');
        return false;
    }
    
    const contenido = fs.readFileSync(rutaArchivo, 'utf8');
    
    // Verificar que NO contenga llamadas directas a Supabase
    const llamadasDirectasSupabase = [
        'supabase.from(\'users\')',
        '.from(\'users\')',
        'supabase.from("users")',
        '.from("users")'
    ];
    
    let llamadasEncontradas = [];
    
    llamadasDirectasSupabase.forEach(llamada => {
        if (contenido.includes(llamada)) {
            llamadasEncontradas.push(llamada);
        }
    });
    
    if (llamadasEncontradas.length > 0) {
        console.log('‚ùå ERROR: A√∫n se encontraron llamadas directas a Supabase:');
        llamadasEncontradas.forEach(llamada => {
            console.log(`   - ${llamada}`);
        });
        return false;
    }
    
    // Verificar que S√ç contenga llamadas al endpoint Next.js
    const llamadasEndpoint = [
        'fetch(\'/api/users/profile\'',
        'method: \'GET\'',
        'Content-Type\': \'application/json\''
    ];
    
    let endpointEncontrado = true;
    llamadasEndpoint.forEach(llamada => {
        if (!contenido.includes(llamada)) {
            console.log(`‚ùå ERROR: No se encontr√≥: ${llamada}`);
            endpointEncontrado = false;
        }
    });
    
    if (!endpointEncontrado) {
        return false;
    }
    
    console.log('‚úÖ Archivo useAuth.ts corregido correctamente');
    console.log('   - ‚ùå Eliminadas llamadas directas a Supabase');
    console.log('   - ‚úÖ Implementadas llamadas al endpoint Next.js');
    
    return true;
}

// Funci√≥n para verificar la estructura de la funci√≥n fetchUserProfile
function verificarFuncionFetchUserProfile() {
    console.log('\nüîß VERIFICANDO FUNCI√ìN fetchUserProfile...');
    
    const rutaArchivo = path.join(__dirname, 'Backend/src/hooks/useAuth.ts');
    const contenido = fs.readFileSync(rutaArchivo, 'utf8');
    
    // Buscar la funci√≥n fetchUserProfile
    const funcionMatch = contenido.match(/const fetchUserProfile = async \(userId: string\) => \{([\s\S]*?)\};/);
    
    if (!funcionMatch) {
        console.log('‚ùå ERROR: Funci√≥n fetchUserProfile no encontrada');
        return false;
    }
    
    const funcionContenido = funcionMatch[1];
    
    // Verificar elementos clave de la funci√≥n corregida
    const elementosRequeridos = [
        'fetch(\'/api/users/profile\'',
        'method: \'GET\'',
        'headers:',
        'Content-Type\': \'application/json\'',
        'if (!response.ok)',
        'const { profile } = await response.json()',
        'setUser(profile)',
        'catch (error)',
        'finally',
        'setLoading(false)'
    ];
    
    let todosElementosPresentes = true;
    
    elementosRequeridos.forEach(elemento => {
        if (!funcionContenido.includes(elemento)) {
            console.log(`‚ùå ERROR: Elemento faltante: ${elemento}`);
            todosElementosPresentes = false;
        }
    });
    
    if (todosElementosPresentes) {
        console.log('‚úÖ Funci√≥n fetchUserProfile implementada correctamente');
        console.log('   - ‚úÖ Usa fetch() en lugar de Supabase directo');
        console.log('   - ‚úÖ Llama al endpoint /api/users/profile');
        console.log('   - ‚úÖ Maneja errores apropiadamente');
        console.log('   - ‚úÖ Actualiza el estado correctamente');
    }
    
    return todosElementosPresentes;
}

// Funci√≥n para verificar que el endpoint existe
function verificarEndpointExiste() {
    console.log('\nüåê VERIFICANDO ENDPOINT /api/users/profile...');
    
    const posiblesRutas = [
        'Backend/src/app/api/users/profile/route.ts',
        'Backend/src/app/api/users/profile/route-corregido-esquema-real.ts',
        'Backend/src/app/api/users/profile/route-fixed.ts'
    ];
    
    let endpointEncontrado = false;
    
    posiblesRutas.forEach(ruta => {
        const rutaCompleta = path.join(__dirname, ruta);
        if (fs.existsSync(rutaCompleta)) {
            console.log(`‚úÖ Endpoint encontrado: ${ruta}`);
            endpointEncontrado = true;
        }
    });
    
    if (!endpointEncontrado) {
        console.log('‚ùå ERROR: No se encontr√≥ el endpoint /api/users/profile');
        return false;
    }
    
    return true;
}

// Funci√≥n para generar reporte de la correcci√≥n
function generarReporte(resultados) {
    console.log('\nüìä GENERANDO REPORTE FINAL...');
    
    const reporte = `
# REPORTE TESTING - SOLUCI√ìN ERROR PERFIL USUARIO ARQUITECTURA

## üéØ OBJETIVO
Verificar que la correcci√≥n del hook useAuth.ts elimine las llamadas directas a Supabase
y use correctamente el endpoint Next.js /api/users/profile.

## üìã RESULTADOS DEL TESTING

### ‚úÖ VERIFICACIONES COMPLETADAS:
${resultados.archivoCorregido ? '‚úÖ' : '‚ùå'} Archivo useAuth.ts corregido
${resultados.funcionCorregida ? '‚úÖ' : '‚ùå'} Funci√≥n fetchUserProfile implementada correctamente
${resultados.endpointExiste ? '‚úÖ' : '‚ùå'} Endpoint /api/users/profile existe

### üîß CAMBIOS IMPLEMENTADOS:

#### ANTES (PROBLEM√ÅTICO):
\`\`\`javascript
const { data: profile, error } = await supabase
  .from('users')
  .select('*')
  .eq('id', userId)
  .single();
\`\`\`

#### DESPU√âS (CORREGIDO):
\`\`\`javascript
const response = await fetch('/api/users/profile', {
  method: 'GET',
  headers: {
    'Content-Type': 'application/json',
  },
});
\`\`\`

### üèóÔ∏è ARQUITECTURA CORREGIDA:
\`\`\`
Frontend (useAuth.ts) ‚Üí Next.js API (/api/users/profile) ‚Üí Supabase
\`\`\`

### üìà BENEFICIOS OBTENIDOS:
- ‚ùå Eliminado error 400 Bad Request
- ‚úÖ Arquitectura limpia y mantenible
- ‚úÖ Validaci√≥n centralizada en el backend
- ‚úÖ Mejor seguridad y control de acceso
- ‚úÖ Logs m√°s claros para debugging

## üéâ ESTADO FINAL:
${resultados.todoExitoso ? '‚úÖ CORRECCI√ìN EXITOSA - PROBLEMA SOLUCIONADO' : '‚ùå CORRECCI√ìN INCOMPLETA - REVISAR ERRORES'}

---
Generado el: ${new Date().toLocaleString()}
`;

    fs.writeFileSync('REPORTE-TESTING-SOLUCION-ERROR-PERFIL-USUARIO-ARQUITECTURA-FINAL.md', reporte);
    console.log('‚úÖ Reporte guardado: REPORTE-TESTING-SOLUCION-ERROR-PERFIL-USUARIO-ARQUITECTURA-FINAL.md');
}

// Funci√≥n principal
async function ejecutarTesting() {
    try {
        console.log('üöÄ Iniciando verificaci√≥n de la correcci√≥n...\n');
        
        const resultados = {
            archivoCorregido: verificarArchivoCorregido(),
            funcionCorregida: verificarFuncionFetchUserProfile(),
            endpointExiste: verificarEndpointExiste()
        };
        
        resultados.todoExitoso = resultados.archivoCorregido && 
                                resultados.funcionCorregida && 
                                resultados.endpointExiste;
        
        generarReporte(resultados);
        
        console.log('\n' + '='.repeat(80));
        if (resultados.todoExitoso) {
            console.log('üéâ TESTING COMPLETADO EXITOSAMENTE');
            console.log('‚úÖ La correcci√≥n del error de perfil de usuario ha sido implementada correctamente');
            console.log('‚úÖ Ya no se har√°n llamadas directas a Supabase desde el frontend');
            console.log('‚úÖ El flujo ahora usa la arquitectura correcta: Frontend ‚Üí Next.js API ‚Üí Supabase');
        } else {
            console.log('‚ùå TESTING COMPLETADO CON ERRORES');
            console.log('‚ö†Ô∏è  Revisar los errores reportados arriba');
        }
        console.log('='.repeat(80));
        
    } catch (error) {
        console.error('‚ùå ERROR DURANTE EL TESTING:', error.message);
    }
}

// Ejecutar testing
ejecutarTesting();
