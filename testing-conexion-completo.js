const { verificarConexionCompleta } = require('./supabase-connection-alternativo');
const { aplicarCorreccionesEsquema } = require('./aplicar-correcciones-esquema');

async function ejecutarTestingCompleto() {
    console.log('üß™ TESTING COMPLETO DE CONEXI√ìN SUPABASE');
    console.log('=========================================\n');
    
    let fase = 1;
    
    // Fase 1: Verificaci√≥n inicial
    console.log(`üìã FASE ${fase++}: Verificaci√≥n inicial de conexi√≥n`);
    console.log('‚îÄ'.repeat(50));
    
    const resultadosIniciales = await verificarConexionCompleta();
    
    const puntuacionInicial = (
        (resultadosIniciales.conexionBasica ? 25 : 0) +
        (resultadosIniciales.tablas * 8.33) +
        (resultadosIniciales.storage ? 25 : 0) +
        (resultadosIniciales.scripts * 12.5)
    );
    
    console.log(`\nüéØ Puntuaci√≥n inicial: ${Math.round(puntuacionInicial)}/100\n`);
    
    // Fase 2: Aplicar correcciones si es necesario
    if (puntuacionInicial < 75) {
        console.log(`üìã FASE ${fase++}: Aplicando correcciones de esquema`);
        console.log('‚îÄ'.repeat(50));
        
        const correccionesAplicadas = await aplicarCorreccionesEsquema();
        console.log(`\n‚úÖ Correcciones aplicadas: ${correccionesAplicadas}\n`);
        
        // Pausa para que las correcciones se apliquen
        console.log('‚è≥ Esperando que las correcciones se apliquen...');
        await new Promise(resolve => setTimeout(resolve, 3000));
    }
    
    // Fase 3: Verificaci√≥n final
    console.log(`üìã FASE ${fase++}: Verificaci√≥n final de conexi√≥n`);
    console.log('‚îÄ'.repeat(50));
    
    const resultadosFinales = await verificarConexionCompleta();
    
    const puntuacionFinal = (
        (resultadosFinales.conexionBasica ? 25 : 0) +
        (resultadosFinales.tablas * 8.33) +
        (resultadosFinales.storage ? 25 : 0) +
        (resultadosFinales.scripts * 12.5)
    );
    
    console.log(`\nüéØ Puntuaci√≥n final: ${Math.round(puntuacionFinal)}/100\n`);
    
    // Fase 4: Reporte final
    console.log(`üìã FASE ${fase++}: Reporte final`);
    console.log('‚îÄ'.repeat(50));
    
    const mejora = puntuacionFinal - puntuacionInicial;
    
    console.log('üìä COMPARACI√ìN DE RESULTADOS:');
    console.log(`   Puntuaci√≥n inicial: ${Math.round(puntuacionInicial)}/100`);
    console.log(`   Puntuaci√≥n final:   ${Math.round(puntuacionFinal)}/100`);
    console.log(`   Mejora:            ${mejora > 0 ? '+' : ''}${Math.round(mejora)} puntos`);
    
    console.log('\nüéØ ESTADO FINAL:');
    if (puntuacionFinal >= 90) {
        console.log('üéâ EXCELENTE - Supabase completamente funcional');
    } else if (puntuacionFinal >= 75) {
        console.log('‚úÖ BUENO - Supabase funcional con configuraci√≥n b√°sica');
    } else if (puntuacionFinal >= 50) {
        console.log('‚ö†Ô∏è  PARCIAL - Supabase parcialmente funcional');
    } else {
        console.log('‚ùå PROBLEM√ÅTICO - Supabase requiere configuraci√≥n manual');
    }
    
    console.log('\nüìã PR√ìXIMOS PASOS RECOMENDADOS:');
    if (puntuacionFinal >= 75) {
        console.log('1. ‚úÖ Continuar con el desarrollo del proyecto');
        console.log('2. ‚úÖ Ejecutar testing de funcionalidades espec√≠ficas');
        console.log('3. ‚úÖ Configurar datos de prueba si es necesario');
    } else {
        console.log('1. üîß Revisar configuraci√≥n manual en Supabase Dashboard');
        console.log('2. üîß Verificar permisos de la service role key');
        console.log('3. üîß Contactar soporte si persisten los problemas');
    }
    
    return {
        inicial: resultadosIniciales,
        final: resultadosFinales,
        puntuacionInicial: Math.round(puntuacionInicial),
        puntuacionFinal: Math.round(puntuacionFinal),
        mejora: Math.round(mejora),
        estado: puntuacionFinal >= 75 ? 'FUNCIONAL' : 'REQUIERE_ATENCION'
    };
}

// Ejecutar si se llama directamente
if (require.main === module) {
    ejecutarTestingCompleto()
        .then(resultados => {
            console.log('\nüéâ Testing completo finalizado');
            
            if (resultados.estado === 'FUNCIONAL') {
                console.log('‚úÖ Supabase est√° listo para usar');
                process.exit(0);
            } else {
                console.log('‚ö†Ô∏è  Supabase requiere atenci√≥n adicional');
                process.exit(1);
            }
        })
        .catch(error => {
            console.log('‚ùå Error en testing completo:', error.message);
            process.exit(1);
        });
}

module.exports = { ejecutarTestingCompleto };
