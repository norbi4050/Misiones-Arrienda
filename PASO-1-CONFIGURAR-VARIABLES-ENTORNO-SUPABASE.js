const fs = require('fs');
const path = require('path');

console.log('üöÄ PASO 1: CONFIGURANDO VARIABLES DE ENTORNO DE SUPABASE');
console.log('=========================================================\n');

// Funci√≥n para crear archivo .env si no existe
function crearArchivoEnv() {
    const envPath = path.join('Backend', '.env.local');
    const envExamplePath = path.join('Backend', '.env.example');
    
    console.log('üìù Creando archivo de variables de entorno...');
    
    const envContent = `# Configuraci√≥n de Supabase
# =============================
# IMPORTANTE: Reemplaza estos valores con tus credenciales reales de Supabase

# URL de tu proyecto Supabase
NEXT_PUBLIC_SUPABASE_URL=https://tu-proyecto.supabase.co

# Clave p√∫blica an√≥nima de Supabase
NEXT_PUBLIC_SUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...

# Clave de servicio de Supabase (SOLO para servidor)
SUPABASE_SERVICE_ROLE_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...

# Base de datos URL (opcional, para conexiones directas)
DATABASE_URL=postgresql://postgres:[PASSWORD]@db.[PROJECT_REF].supabase.co:5432/postgres

# Configuraci√≥n de autenticaci√≥n
NEXTAUTH_SECRET=tu-secret-key-muy-seguro-aqui
NEXTAUTH_URL=http://localhost:3000

# Configuraci√≥n de email (opcional)
SMTP_HOST=smtp.gmail.com
SMTP_PORT=587
SMTP_USER=tu-email@gmail.com
SMTP_PASS=tu-password-de-aplicacion

# Configuraci√≥n de MercadoPago (opcional)
MERCADOPAGO_ACCESS_TOKEN=tu-access-token-de-mercadopago
MERCADOPAGO_PUBLIC_KEY=tu-public-key-de-mercadopago

# Configuraci√≥n de desarrollo
NODE_ENV=development
`;

    try {
        // Crear archivo .env.local
        fs.writeFileSync(envPath, envContent);
        console.log('‚úÖ Archivo .env.local creado exitosamente');
        
        // Crear archivo .env.example para referencia
        fs.writeFileSync(envExamplePath, envContent);
        console.log('‚úÖ Archivo .env.example creado como referencia');
        
        return true;
    } catch (error) {
        console.log('‚ùå Error creando archivos de entorno:', error.message);
        return false;
    }
}

// Funci√≥n para verificar estructura de directorios
function verificarEstructura() {
    console.log('üîç Verificando estructura de directorios...');
    
    const directoriosRequeridos = [
        'Backend',
        'Backend/src',
        'Backend/src/lib',
        'Backend/src/lib/supabase'
    ];
    
    let estructuraCorrecta = true;
    
    directoriosRequeridos.forEach(dir => {
        if (fs.existsSync(dir)) {
            console.log(`‚úÖ ${dir}: Existe`);
        } else {
            console.log(`‚ùå ${dir}: No existe`);
            estructuraCorrecta = false;
        }
    });
    
    return estructuraCorrecta;
}

// Funci√≥n para verificar archivos de configuraci√≥n de Supabase
function verificarArchivosSupabase() {
    console.log('\nüîç Verificando archivos de configuraci√≥n de Supabase...');
    
    const archivosSupabase = [
        'Backend/src/lib/supabase/client.ts',
        'Backend/src/lib/supabase/server.ts',
        'Backend/src/middleware.ts'
    ];
    
    let archivosCorrectos = 0;
    
    archivosSupabase.forEach(archivo => {
        if (fs.existsSync(archivo)) {
            console.log(`‚úÖ ${archivo}: Existe`);
            archivosCorrectos++;
        } else {
            console.log(`‚ùå ${archivo}: No existe`);
        }
    });
    
    return archivosCorrectos === archivosSupabase.length;
}

// Funci√≥n para crear gu√≠a de configuraci√≥n
function crearGuiaConfiguracion() {
    console.log('\nüìö Creando gu√≠a de configuraci√≥n...');
    
    const guiaContent = `# üöÄ GU√çA DE CONFIGURACI√ìN DE SUPABASE

## üìã PASOS PARA CONFIGURAR SUPABASE

### 1. Crear Proyecto en Supabase
1. Ve a [https://supabase.com](https://supabase.com)
2. Crea una cuenta o inicia sesi√≥n
3. Crea un nuevo proyecto
4. Anota el nombre y regi√≥n del proyecto

### 2. Obtener Credenciales
1. En tu dashboard de Supabase, ve a **Settings > API**
2. Copia los siguientes valores:
   - **Project URL**: \`https://tu-proyecto.supabase.co\`
   - **anon public key**: La clave p√∫blica an√≥nima
   - **service_role key**: La clave de servicio (¬°MANT√âN SECRETA!)

### 3. Configurar Variables de Entorno
1. Abre el archivo \`.env.local\` en la carpeta Backend
2. Reemplaza los valores de ejemplo con tus credenciales reales:

\`\`\`env
NEXT_PUBLIC_SUPABASE_URL=https://tu-proyecto-real.supabase.co
NEXT_PUBLIC_SUPABASE_ANON_KEY=tu-clave-anonima-real
SUPABASE_SERVICE_ROLE_KEY=tu-clave-de-servicio-real
\`\`\`

### 4. Configurar Base de Datos
1. En Supabase, ve a **SQL Editor**
2. Ejecuta los scripts SQL de correcci√≥n:
   - \`SUPABASE-CORRECCION-ESQUEMA-PROPERTIES.sql\`
   - \`SUPABASE-CORRECCION-AUTH.sql\`

### 5. Configurar Autenticaci√≥n
1. En Supabase, ve a **Authentication > Settings**
2. Configura los providers que necesites (Email, Google, etc.)
3. Configura las URLs de redirecci√≥n:
   - Site URL: \`http://localhost:3000\`
   - Redirect URLs: \`http://localhost:3000/auth/callback\`

### 6. Configurar Storage (Opcional)
1. En Supabase, ve a **Storage**
2. Crea buckets para im√°genes:
   - \`property-images\`
   - \`profile-images\`
3. Configura pol√≠ticas de acceso seg√∫n necesites

### 7. Verificar Configuraci√≥n
1. Ejecuta el script de verificaci√≥n:
   \`\`\`bash
   node verificar-supabase-env.js
   \`\`\`

## üîß SOLUCI√ìN DE PROBLEMAS COMUNES

### Error: "Invalid API key"
- Verifica que las claves est√©n correctas
- Aseg√∫rate de no tener espacios extra
- Verifica que el proyecto est√© activo

### Error: "CORS policy"
- Configura las URLs permitidas en Supabase
- Verifica la configuraci√≥n de Site URL

### Error: "Database connection"
- Verifica que la DATABASE_URL est√© correcta
- Aseg√∫rate de que el proyecto no est√© pausado

## üìû SOPORTE
Si tienes problemas, revisa:
1. La documentaci√≥n oficial de Supabase
2. Los logs en la consola del navegador
3. Los logs del servidor Next.js
`;

    try {
        fs.writeFileSync('Backend/GUIA-CONFIGURACION-SUPABASE-PASO-A-PASO.md', guiaContent);
        console.log('‚úÖ Gu√≠a de configuraci√≥n creada exitosamente');
        return true;
    } catch (error) {
        console.log('‚ùå Error creando gu√≠a:', error.message);
        return false;
    }
}

// Funci√≥n principal
function ejecutarPaso1() {
    console.log('üéØ Iniciando configuraci√≥n de variables de entorno...\n');
    
    // Verificar estructura
    const estructuraOK = verificarEstructura();
    if (!estructuraOK) {
        console.log('\n‚ö†Ô∏è  Advertencia: Algunos directorios no existen');
    }
    
    // Verificar archivos de Supabase
    const archivosOK = verificarArchivosSupabase();
    if (!archivosOK) {
        console.log('\n‚ö†Ô∏è  Advertencia: Algunos archivos de Supabase no existen');
    }
    
    // Crear archivos de entorno
    const envCreado = crearArchivoEnv();
    
    // Crear gu√≠a de configuraci√≥n
    const guiaCreada = crearGuiaConfiguracion();
    
    console.log('\nüìä RESUMEN DEL PASO 1:');
    console.log('========================');
    console.log(`üìÅ Estructura de directorios: ${estructuraOK ? '‚úÖ Correcta' : '‚ö†Ô∏è  Con advertencias'}`);
    console.log(`üìÑ Archivos de Supabase: ${archivosOK ? '‚úÖ Correctos' : '‚ö†Ô∏è  Con advertencias'}`);
    console.log(`üîß Archivos .env: ${envCreado ? '‚úÖ Creados' : '‚ùå Error'}`);
    console.log(`üìö Gu√≠a de configuraci√≥n: ${guiaCreada ? '‚úÖ Creada' : '‚ùå Error'}`);
    
    console.log('\nüéØ PR√ìXIMOS PASOS:');
    console.log('==================');
    console.log('1. Abre Backend/.env.local');
    console.log('2. Reemplaza las credenciales de ejemplo con las reales');
    console.log('3. Lee la gu√≠a: Backend/GUIA-CONFIGURACION-SUPABASE-PASO-A-PASO.md');
    console.log('4. Ejecuta: node PASO-2-EJECUTAR-SCRIPTS-SQL.js');
    
    console.log('\n‚úÖ PASO 1 COMPLETADO');
    
    return {
        estructura: estructuraOK,
        archivos: archivosOK,
        env: envCreado,
        guia: guiaCreada
    };
}

// Ejecutar
const resultado = ejecutarPaso1();

// Generar reporte
const reporte = {
    paso: 1,
    nombre: 'Configurar Variables de Entorno de Supabase',
    timestamp: new Date().toISOString(),
    resultado: resultado,
    estado: resultado.env && resultado.guia ? 'COMPLETADO' : 'CON_ADVERTENCIAS',
    archivos_creados: [
        'Backend/.env.local',
        'Backend/.env.example',
        'Backend/GUIA-CONFIGURACION-SUPABASE-PASO-A-PASO.md'
    ],
    proximos_pasos: [
        'Configurar credenciales reales en .env.local',
        'Ejecutar scripts SQL de correcci√≥n',
        'Verificar conexi√≥n con Supabase'
    ]
};

try {
    fs.writeFileSync('REPORTE-PASO-1-CONFIGURACION-ENV.json', JSON.stringify(reporte, null, 2));
    console.log('\nüìÑ Reporte generado: REPORTE-PASO-1-CONFIGURACION-ENV.json');
} catch (error) {
    console.log('‚ùå Error generando reporte:', error.message);
}
