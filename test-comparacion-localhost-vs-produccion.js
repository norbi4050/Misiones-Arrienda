const puppeteer = require('puppeteer');

console.log('üîç INICIANDO COMPARACI√ìN: LOCALHOST vs PRODUCCI√ìN');
console.log('='.repeat(80));
console.log('üìç Localhost: http://localhost:3000');
console.log('üåê Producci√≥n: https://www.misionesarrienda.com.ar');
console.log('='.repeat(80));

async function compararSitios() {
  let browser;
  
  try {
    console.log('üöÄ Lanzando navegador...');
    browser = await puppeteer.launch({ 
      headless: false,
      defaultViewport: { width: 1200, height: 800 },
      args: ['--no-sandbox', '--disable-setuid-sandbox']
    });
    
    const page = await browser.newPage();
    
    // Resultados de comparaci√≥n
    const resultados = {
      localhost: {
        disponible: false,
        navegacion: {},
        errores: [],
        funcionalidades: {}
      },
      produccion: {
        disponible: false,
        navegacion: {},
        errores: [],
        funcionalidades: {}
      }
    };
    
    console.log('\nüìç FASE 1: TESTING LOCALHOST (http://localhost:3000)');
    console.log('-'.repeat(60));
    
    try {
      // Capturar logs de localhost
      const localhostLogs = [];
      page.on('console', msg => {
        localhostLogs.push(`[${msg.type()}] ${msg.text()}`);
      });
      
      await page.goto('http://localhost:3000', { waitUntil: 'networkidle2', timeout: 10000 });
      console.log('‚úÖ Localhost: Sitio cargado exitosamente');
      resultados.localhost.disponible = true;
      
      // Verificar elementos clave en localhost
      const titleLocalhost = await page.title();
      console.log(`üìÑ Localhost - T√≠tulo: ${titleLocalhost}`);
      
      // Verificar navegaci√≥n en localhost
      const navLinksLocalhost = await page.$$eval('nav a', links => 
        links.map(link => ({ text: link.textContent.trim(), href: link.href }))
      );
      console.log(`üîó Localhost - Enlaces de navegaci√≥n encontrados: ${navLinksLocalhost.length}`);
      navLinksLocalhost.forEach(link => {
        console.log(`   - ${link.text}: ${link.href}`);
      });
      
      resultados.localhost.navegacion = {
        titulo: titleLocalhost,
        enlaces: navLinksLocalhost,
        logs: localhostLogs
      };
      
      // Probar navegaci√≥n a Propiedades en localhost
      try {
        await page.click('a[href="/properties"]');
        await page.waitForTimeout(2000);
        const urlAfterClick = page.url();
        console.log(`üîÑ Localhost - Navegaci√≥n a Propiedades: ${urlAfterClick}`);
        resultados.localhost.funcionalidades.navegacionPropiedades = urlAfterClick.includes('/properties');
      } catch (error) {
        console.log(`‚ùå Localhost - Error navegaci√≥n Propiedades: ${error.message}`);
        resultados.localhost.errores.push(`Navegaci√≥n Propiedades: ${error.message}`);
      }
      
    } catch (error) {
      console.log(`‚ùå Localhost: No disponible - ${error.message}`);
      resultados.localhost.errores.push(`Sitio no disponible: ${error.message}`);
    }
    
    console.log('\nüåê FASE 2: TESTING PRODUCCI√ìN (https://www.misionesarrienda.com.ar)');
    console.log('-'.repeat(60));
    
    try {
      // Capturar logs de producci√≥n
      const produccionLogs = [];
      page.on('console', msg => {
        produccionLogs.push(`[${msg.type()}] ${msg.text()}`);
      });
      
      await page.goto('https://www.misionesarrienda.com.ar', { waitUntil: 'networkidle2', timeout: 15000 });
      console.log('‚úÖ Producci√≥n: Sitio cargado exitosamente');
      resultados.produccion.disponible = true;
      
      // Verificar elementos clave en producci√≥n
      const titleProduccion = await page.title();
      console.log(`üìÑ Producci√≥n - T√≠tulo: ${titleProduccion}`);
      
      // Verificar navegaci√≥n en producci√≥n
      const navLinksProduccion = await page.$$eval('nav a', links => 
        links.map(link => ({ text: link.textContent.trim(), href: link.href }))
      );
      console.log(`üîó Producci√≥n - Enlaces de navegaci√≥n encontrados: ${navLinksProduccion.length}`);
      navLinksProduccion.forEach(link => {
        console.log(`   - ${link.text}: ${link.href}`);
      });
      
      resultados.produccion.navegacion = {
        titulo: titleProduccion,
        enlaces: navLinksProduccion,
        logs: produccionLogs
      };
      
      // Probar navegaci√≥n a Propiedades en producci√≥n
      try {
        await page.click('a[href="/properties"]');
        await page.waitForTimeout(2000);
        const urlAfterClick = page.url();
        console.log(`üîÑ Producci√≥n - Navegaci√≥n a Propiedades: ${urlAfterClick}`);
        resultados.produccion.funcionalidades.navegacionPropiedades = urlAfterClick.includes('/properties');
      } catch (error) {
        console.log(`‚ùå Producci√≥n - Error navegaci√≥n Propiedades: ${error.message}`);
        resultados.produccion.errores.push(`Navegaci√≥n Propiedades: ${error.message}`);
      }
      
    } catch (error) {
      console.log(`‚ùå Producci√≥n: No disponible - ${error.message}`);
      resultados.produccion.errores.push(`Sitio no disponible: ${error.message}`);
    }
    
    console.log('\nüìä FASE 3: AN√ÅLISIS COMPARATIVO');
    console.log('-'.repeat(60));
    
    // Comparar disponibilidad
    console.log('üîç DISPONIBILIDAD:');
    console.log(`   Localhost: ${resultados.localhost.disponible ? '‚úÖ DISPONIBLE' : '‚ùå NO DISPONIBLE'}`);
    console.log(`   Producci√≥n: ${resultados.produccion.disponible ? '‚úÖ DISPONIBLE' : '‚ùå NO DISPONIBLE'}`);
    
    // Comparar t√≠tulos
    if (resultados.localhost.disponible && resultados.produccion.disponible) {
      console.log('\nüîç T√çTULOS:');
      console.log(`   Localhost: "${resultados.localhost.navegacion.titulo}"`);
      console.log(`   Producci√≥n: "${resultados.produccion.navegacion.titulo}"`);
      
      const titulosIguales = resultados.localhost.navegacion.titulo === resultados.produccion.navegacion.titulo;
      console.log(`   Coinciden: ${titulosIguales ? '‚úÖ S√ç' : '‚ùå NO'}`);
      
      // Comparar navegaci√≥n
      console.log('\nüîç NAVEGACI√ìN:');
      console.log(`   Enlaces Localhost: ${resultados.localhost.navegacion.enlaces.length}`);
      console.log(`   Enlaces Producci√≥n: ${resultados.produccion.navegacion.enlaces.length}`);
      
      // Comparar funcionalidades
      console.log('\nüîç FUNCIONALIDADES:');
      console.log(`   Navegaci√≥n Propiedades Localhost: ${resultados.localhost.funcionalidades.navegacionPropiedades ? '‚úÖ FUNCIONA' : '‚ùå NO FUNCIONA'}`);
      console.log(`   Navegaci√≥n Propiedades Producci√≥n: ${resultados.produccion.funcionalidades.navegacionPropiedades ? '‚úÖ FUNCIONA' : '‚ùå NO FUNCIONA'}`);
    }
    
    // Mostrar errores
    console.log('\nüîç ERRORES DETECTADOS:');
    if (resultados.localhost.errores.length > 0) {
      console.log('   Localhost:');
      resultados.localhost.errores.forEach(error => console.log(`     ‚ùå ${error}`));
    } else {
      console.log('   Localhost: ‚úÖ Sin errores');
    }
    
    if (resultados.produccion.errores.length > 0) {
      console.log('   Producci√≥n:');
      resultados.produccion.errores.forEach(error => console.log(`     ‚ùå ${error}`));
    } else {
      console.log('   Producci√≥n: ‚úÖ Sin errores');
    }
    
    console.log('\nüéØ FASE 4: CONCLUSIONES');
    console.log('-'.repeat(60));
    
    if (resultados.localhost.disponible && resultados.produccion.disponible) {
      console.log('‚úÖ AMBOS SITIOS EST√ÅN DISPONIBLES');
      
      // Determinar si hay diferencias significativas
      const diferenciasSignificativas = [];
      
      if (resultados.localhost.navegacion.titulo !== resultados.produccion.navegacion.titulo) {
        diferenciasSignificativas.push('T√≠tulos diferentes');
      }
      
      if (resultados.localhost.navegacion.enlaces.length !== resultados.produccion.navegacion.enlaces.length) {
        diferenciasSignificativas.push('N√∫mero de enlaces de navegaci√≥n diferente');
      }
      
      if (resultados.localhost.funcionalidades.navegacionPropiedades !== resultados.produccion.funcionalidades.navegacionPropiedades) {
        diferenciasSignificativas.push('Funcionalidad de navegaci√≥n a Propiedades diferente');
      }
      
      if (diferenciasSignificativas.length > 0) {
        console.log('‚ö†Ô∏è DIFERENCIAS ENCONTRADAS:');
        diferenciasSignificativas.forEach(diff => console.log(`   - ${diff}`));
      } else {
        console.log('‚úÖ SITIOS FUNCIONALMENTE EQUIVALENTES');
      }
      
    } else if (resultados.localhost.disponible && !resultados.produccion.disponible) {
      console.log('‚ö†Ô∏è SOLO LOCALHOST EST√Å DISPONIBLE');
      console.log('üí° El sitio de producci√≥n podr√≠a estar ca√≠do o tener problemas');
      
    } else if (!resultados.localhost.disponible && resultados.produccion.disponible) {
      console.log('‚ö†Ô∏è SOLO PRODUCCI√ìN EST√Å DISPONIBLE');
      console.log('üí° El servidor local no est√° ejecut√°ndose');
      
    } else {
      console.log('‚ùå NING√öN SITIO EST√Å DISPONIBLE');
      console.log('üí° Verificar conectividad y estado de los servidores');
    }
    
    console.log('\nüîß RECOMENDACIONES:');
    
    if (resultados.localhost.disponible) {
      console.log('‚úÖ Localhost funcional - Continuar desarrollo local');
      if (resultados.localhost.errores.length > 0) {
        console.log('‚ö†Ô∏è Resolver errores de localhost antes del deployment');
      }
    }
    
    if (resultados.produccion.disponible) {
      console.log('‚úÖ Producci√≥n accesible - Sitio web p√∫blico funcionando');
      if (resultados.produccion.errores.length > 0) {
        console.log('‚ö†Ô∏è Revisar errores en producci√≥n');
      }
    }
    
    console.log('\n‚úÖ COMPARACI√ìN COMPLETADA');
    
  } catch (error) {
    console.error('‚ùå Error durante la comparaci√≥n:', error);
  } finally {
    if (browser) {
      await browser.close();
    }
  }
}

// Ejecutar comparaci√≥n
compararSitios().then(() => {
  console.log('\nüèÅ Comparaci√≥n finalizada');
}).catch(error => {
  console.error('üí• Error fatal:', error);
});
